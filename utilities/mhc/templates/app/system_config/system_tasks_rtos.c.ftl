/*******************************************************************************
 System Tasks File

  File Name:
    system_tasks.c

  Summary:
    This file contains source code necessary to maintain system's polled state
    machines.

  Description:
    This file contains source code necessary to maintain system's polled state
    machines.  It implements the "SYS_Tasks" function that calls the individual
    "Tasks" functions for all the MPLAB Harmony modules in the system.

  Remarks:
    This file requires access to the systemObjects global data structure that
    contains the object handles to all MPLAB Harmony module objects executing
    polled in the system.  These handles are passed into the individual module
    "Tasks" functions to identify the instance of the module to maintain.
 *******************************************************************************/

// DOM-IGNORE-BEGIN
/*******************************************************************************
Copyright (c) 2013-2015 released Microchip Technology Inc.  All rights reserved.

Microchip licenses to you the right to use, modify, copy and distribute
Software only when embedded on a Microchip microcontroller or digital signal
controller that is integrated into your product or third party product
(pursuant to the sublicense terms in the accompanying license agreement).

You should refer to the license agreement accompanying this Software for
additional information regarding your rights and obligations.

SOFTWARE AND DOCUMENTATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF
MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER
CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR
OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
(INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
 *******************************************************************************/
// DOM-IGNORE-END

<#include "/utilities/mhc/templates/app/system_config/rtos_ftl_macros.ftl">

// *****************************************************************************
// *****************************************************************************
// Section: Included Files
// *****************************************************************************
// *****************************************************************************

#include "system_config.h"
#include "system_definitions.h"
<#if CONFIG_APP_IDX_0?has_content>
#include "${CONFIG_APP_NAME_0?lower_case}.h"
<#else>
#include "app.h"
</#if>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
#include "${CONFIG_APP_NAME_1?lower_case}.h"
</#if>
<#if CONFIG_APP_IDX_2 == true>
#include "${CONFIG_APP_NAME_2?lower_case}.h"
</#if>
<#if CONFIG_APP_IDX_3 == true>
#include "${CONFIG_APP_NAME_3?lower_case}.h"
</#if>
<#if CONFIG_APP_IDX_4 == true>
#include "${CONFIG_APP_NAME_4?lower_case}.h"
</#if>
<#if CONFIG_APP_IDX_5 == true>
#include "${CONFIG_APP_NAME_5?lower_case}.h"
</#if>
<#if CONFIG_APP_IDX_6 == true>
#include "${CONFIG_APP_NAME_6?lower_case}.h"
</#if>
<#if CONFIG_APP_IDX_7 == true>
#include "${CONFIG_APP_NAME_7?lower_case}.h"
</#if>
<#if CONFIG_APP_IDX_8 == true>
#include "${CONFIG_APP_NAME_8?lower_case}.h"
</#if>
<#if CONFIG_APP_IDX_9 == true>
#include "${CONFIG_APP_NAME_9?lower_case}.h"
</#if>
</#if>


// *****************************************************************************
// *****************************************************************************
// Section: Local Prototypes
// *****************************************************************************
// *****************************************************************************
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-III">
OS_TCB  _SYS_Tasks_TCB;
CPU_STK _SYS_TasksStk[${CONFIG_FW_SYS_TASK_SIZE}];

<#if (CONFIG_DRV_CODEC_AK4384_RTOS == "Standalone") && (CONFIG_DRV_CODEC_AK4384_INST_IDX0 == true)>
OS_TCB  _DRV_CODEC_AK4384_Tasks_TCB;
CPU_STK _DRV_CODEC_AK4384_TasksStk[${CONFIG_DRV_CODEC_AK4384_RTOS_TASK_SIZE}];
</#if>
<#if (CONFIG_DRV_CODEC_AK4953_RTOS == "Standalone") && (CONFIG_DRV_CODEC_AK4953_INST_IDX0 == true)>
OS_TCB  _DRV_CODEC_AK4953_Tasks_TCB;
CPU_STK _DRV_CODEC_AK4953_TasksStk[${CONFIG_DRV_CODEC_AK4953_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INTERRUPT_MODE == false>
<#if CONFIG_DRV_I2C_INST_IDX0 == true && CONFIG_DRV_I2C_RTOS_IDX0 == "Standalone">
OS_TCB  _DRV_I2C_IDX0_Tasks_TCB;
CPU_STK _DRV_I2C_IDX0_TasksStk[${CONFIG_DRV_I2C_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX1 == true && CONFIG_DRV_I2C_RTOS_IDX1 == "Standalone">
OS_TCB  _DRV_I2C_IDX1_Tasks_TCB;
CPU_STK _DRV_I2C_IDX1_TasksStk[${CONFIG_DRV_I2C_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX2 == true && CONFIG_DRV_I2C_RTOS_IDX2 == "Standalone">
OS_TCB  _DRV_I2C_IDX2_Tasks_TCB;
CPU_STK _DRV_I2C_IDX2_TasksStk[${CONFIG_DRV_I2C_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX3 == true && CONFIG_DRV_I2C_RTOS_IDX3 == "Standalone">
OS_TCB  _DRV_I2C_IDX3_Tasks_TCB;
CPU_STK _DRV_I2C_IDX3_TasksStk[${CONFIG_DRV_I2C_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX4 == true && CONFIG_DRV_I2C_RTOS_IDX4 == "Standalone">
OS_TCB  _DRV_I2C_IDX4_Tasks_TCB;
CPU_STK _DRV_I2C_IDX4_TasksStk[${CONFIG_DRV_I2C_IDX4_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_DRV_I2S_INTERRUPT_MODE == false>
<#if CONFIG_DRV_I2S_INST_IDX0 == true && CONFIG_DRV_I2S_RTOS_IDX0 == "Standalone">
OS_TCB  _DRV_I2S_IDX0_Tasks_TCB;
CPU_STK _DRV_I2S_IDX0_TasksStk[${CONFIG_DRV_I2S_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX1 == true && CONFIG_DRV_I2S_RTOS_IDX1 == "Standalone">
OS_TCB  _DRV_I2S_IDX1_Tasks_TCB;
CPU_STK _DRV_I2S_IDX1_TasksStk[${CONFIG_DRV_I2S_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX2 == true && CONFIG_DRV_I2S_RTOS_IDX2 == "Standalone">
OS_TCB  _DRV_I2S_IDX2_Tasks_TCB;
CPU_STK _DRV_I2S_IDX2_TasksStk[${CONFIG_DRV_I2S_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX3 == true && CONFIG_DRV_I2S_RTOS_IDX3 == "Standalone">
OS_TCB  _DRV_I2S_IDX3_Tasks_TCB;
CPU_STK _DRV_I2S_IDX3_TasksStk[${CONFIG_DRV_I2S_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX4 == true && CONFIG_DRV_I2S_RTOS_IDX4 == "Standalone">
OS_TCB  _DRV_I2S_IDX4_Tasks_TCB;
CPU_STK _DRV_I2S_IDX4_TasksStk[${CONFIG_DRV_I2S_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX5 == true && CONFIG_DRV_I2S_RTOS_IDX5 == "Standalone">
OS_TCB  _DRV_I2S_IDX5_Tasks_TCB;
CPU_STK _DRV_I2S_IDX5_TasksStk[${CONFIG_DRV_I2S_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_DRV_SDCARD_RTOS == "Standalone" && CONFIG_USE_DRV_SDCARD == true>
OS_TCB  _DRV_SDCARD_Tasks_TCB;
CPU_STK _DRV_SDCARD_TasksStk[${CONFIG_DRV_SDCARD_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_USE_ISR_MODE == false>
<#if CONFIG_DRV_SPI_IDX0 == true && CONFIG_DRV_SPI_RTOS_IDX0 == "Standalone">
OS_TCB  _DRV_SPI_IDX0_Tasks_TCB;
CPU_STK _DRV_SPI_IDX0_TasksStk[${CONFIG_DRV_SPI_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX1 == true && CONFIG_DRV_SPI_RTOS_IDX1 == "Standalone">
OS_TCB  _DRV_SPI_IDX1_Tasks_TCB;
CPU_STK _DRV_SPI_IDX1_TasksStk[${CONFIG_DRV_SPI_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX2 == true && CONFIG_DRV_SPI_RTOS_IDX2 == "Standalone">
OS_TCB  _DRV_SPI_IDX2_Tasks_TCB;
CPU_STK _DRV_SPI_IDX2_TasksStk[${CONFIG_DRV_SPI_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX3 == true && CONFIG_DRV_SPI_RTOS_IDX3 == "Standalone">
OS_TCB  _DRV_SPI_IDX3_Tasks_TCB;
CPU_STK _DRV_SPI_IDX3_TasksStk[${CONFIG_DRV_SPI_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX4 == true && CONFIG_DRV_SPI_RTOS_IDX4 == "Standalone">
OS_TCB  _DRV_SPI_IDX4_Tasks_TCB;
CPU_STK _DRV_SPI_IDX4_TasksStk[${CONFIG_DRV_SPI_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX5 == true && CONFIG_DRV_SPI_RTOS_IDX5 == "Standalone">
OS_TCB  _DRV_SPI_IDX5_Tasks_TCB;
CPU_STK _DRV_SPI_IDX5_TasksStk[${CONFIG_DRV_SPI_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_DRV_SST25VF016B_INST_IDX0 == true && CONFIG_DRV_SST25VF016B_RTOS_IDX0 == "Standalone">
OS_TCB  _DRV_SST25VF016B_IDX0_Tasks_TCB;
CPU_STK _DRV_SST25VF016B_IDX0_TasksStk[${CONFIG_DRV_SST25VF016B_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF016B_INST_IDX1 == true && CONFIG_DRV_SST25VF016B_RTOS_IDX1 == "Standalone">
OS_TCB  _DRV_SST25VF016B_IDX1_Tasks_TCB;
CPU_STK _DRV_SST25VF016B_IDX1_TasksStk[${CONFIG_DRV_SST25VF016B_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_DRV_IPF == true && CONFIG_DRV_IPF_RTOS == "Standalone">
OS_TCB  _DRV_IPF_Tasks_TCB;
CPU_STK _DRV_IPF_TasksStk[${CONFIG_DRV_IPF_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25_INST_IDX0 == true && CONFIG_DRV_SST0B_RTOS_IDX0 == "Standalone">
OS_TCB  _DRV_SST25_IDX0_Tasks_TCB;
CPU_STK _DRV_SST25_IDX0_TasksStk[${CONFIG_DRV_SST25_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25_INST_IDX1 == true && CONFIG_DRV_SST25_RTOS_IDX1 == "Standalone">
OS_TCB  _DRV_SST25_IDX1_Tasks_TCB;
CPU_STK _DRV_SST25_IDX1_TasksStk[${CONFIG_DRV_SST25_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF020B_INST_IDX0 == true && CONFIG_DRV_SST25VF020B_RTOS_IDX0 == "Standalone">
OS_TCB  _DRV_SST25VF020B_IDX0_Tasks_TCB;
CPU_STK _DRV_SST25VF020B_IDX0_TasksStk[${CONFIG_DRV_SST25VF020B_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF020B_INST_IDX1 == true && CONFIG_DRV_SST25VF020B_RTOS_IDX1 == "Standalone">
OS_TCB  _DRV_SST25VF020B_IDX1_Tasks_TCB;
CPU_STK _DRV_SST25VF020B_IDX1_TasksStk[${CONFIG_DRV_SST25VF020B_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_0 == true && CONFIG_DRV_TMR_RTOS_IDX0 == "Standalone">
OS_TCB  _DRV_TMR_IDX0_Tasks_TCB;
CPU_STK _DRV_TMR_IDX0_TasksStk[${CONFIG_DRV_TMR_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_1 == true && CONFIG_DRV_TMR_RTOS_IDX1 == "Standalone">
OS_TCB  _DRV_TMR_IDX1_Tasks_TCB;
CPU_STK _DRV_TMR_IDX1_TasksStk[${CONFIG_DRV_TMR_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_2 == true && CONFIG_DRV_TMR_RTOS_IDX2 == "Standalone">
OS_TCB  _DRV_TMR_IDX2_Tasks_TCB;
CPU_STK _DRV_TMR_IDX2_TasksStk[${CONFIG_DRV_TMR_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_3 == true && CONFIG_DRV_TMR_RTOS_IDX3 == "Standalone">
OS_TCB  _DRV_TMR_IDX3_Tasks_TCB;
CPU_STK _DRV_TMR_IDX3_TasksStk[${CONFIG_DRV_TMR_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_4 == true && CONFIG_DRV_TMR_RTOS_IDX4 == "Standalone">
OS_TCB  _DRV_TMR_IDX4_Tasks_TCB;
CPU_STK _DRV_TMR_IDX4_TasksStk[${CONFIG_DRV_TMR_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_5 == true && CONFIG_DRV_TMR_RTOS_IDX5 == "Standalone">
OS_TCB  _DRV_TMR_IDX5_Tasks_TCB;
CPU_STK _DRV_TMR_IDX5_TasksStk[${CONFIG_DRV_TMR_IDX5_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_6 == true && CONFIG_DRV_TMR_RTOS_IDX6 == "Standalone">
OS_TCB  _DRV_TMR_IDX6_Tasks_TCB;
CPU_STK _DRV_TMR_IDX6_TasksStk[${CONFIG_DRV_TMR_IDX6_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_7 == true && CONFIG_DRV_TMR_RTOS_IDX7 == "Standalone">
OS_TCB  _DRV_TMR_IDX7_Tasks_TCB;
CPU_STK _DRV_TMR_IDX7_TasksStk[${CONFIG_DRV_TMR_IDX7_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_8 == true && CONFIG_DRV_TMR_RTOS_IDX8 == "Standalone">
OS_TCB  _DRV_TMR_IDX8_Tasks_TCB;
CPU_STK _DRV_TMR_IDX8_TasksStk[${CONFIG_DRV_TMR_IDX8_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true && CONFIG_DRV_TOUCH_ADC10BIT_RTOS == "Standalone">
OS_TCB  _DRV_TOUCH_ADC10BIT_Tasks_TCB;
CPU_STK _DRV_TOUCH_ADC10BIT_TasksStk[${CONFIG_DRV_TOUCH_ADC10BIT_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true && CONFIG_DRV_TOUCH_MTCH6301_RTOS == "Standalone">
OS_TCB  _DRV_TOUCH_MTCH6301_Tasks_TCB;
CPU_STK _DRV_TOUCH_MTCH6301_TasksStk[${CONFIG_DRV_TOUCH_MTCH6301_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6303 == true && CONFIG_DRV_TOUCH_MTCH6303_RTOS == "Standalone">
OS_TCB  _DRV_TOUCH_MTCH6303_Tasks_TCB;
CPU_STK _DRV_TOUCH_MTCH6303_TasksStk[${CONFIG_DRV_TOUCH_MTCH6303_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INTERRUPT_MODE == false>
<#if CONFIG_DRV_USART_INST_IDX0 == true && CONFIG_DRV_USART_RTOS_IDX0 == "Standalone">
OS_TCB  _DRV_USART_IDX0_Tasks_TCB;
CPU_STK _DRV_USART_IDX0_TasksStk[${CONFIG_DRV_USART_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX1 == true && CONFIG_DRV_USART_RTOS_IDX1 == "Standalone">
OS_TCB  _DRV_USART_IDX1_Tasks_TCB;
CPU_STK _DRV_USART_IDX1_TasksStk[${CONFIG_DRV_USART_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX2 == true && CONFIG_DRV_USART_RTOS_IDX2 == "Standalone">
OS_TCB  _DRV_USART_IDX2_Tasks_TCB;
CPU_STK _DRV_USART_IDX2_TasksStk[${CONFIG_DRV_USART_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX3 == true && CONFIG_DRV_USART_RTOS_IDX3 == "Standalone">
OS_TCB  _DRV_USART_IDX3_Tasks_TCB;
CPU_STK _DRV_USART_IDX3_TasksStk[${CONFIG_DRV_USART_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX4 == true && CONFIG_DRV_USART_RTOS_IDX4 == "Standalone">
OS_TCB  _DRV_USART_IDX4_Tasks_TCB;
CPU_STK _DRV_USART_IDX4_TasksStk[${CONFIG_DRV_USART_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX5 == true && CONFIG_DRV_USART_RTOS_IDX5 == "Standalone">
OS_TCB  _DRV_USART_IDX5_Tasks_TCB;
CPU_STK _DRV_USART_IDX5_TasksStk[${CONFIG_DRV_USART_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_USE_GFX_STACK && CONFIG_GFX_RTOS == "Standalone">
OS_TCB  _GFX_Tasks_TCB;
CPU_STK _GFX_TasksStk[${CONFIG_GFX_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN == true && CONFIG_GFX_HGC_RTOS == "Standalone">
OS_TCB  _GFX_HGC_Tasks_TCB;
CPU_STK _GFX_HGC_TasksStk[${CONFIG_GFX_HGC_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_COMMAND_RTOS == "Standalone">
OS_TCB  _SYS_COMMAND_Tasks_TCB;
CPU_STK _SYS_COMMAND_TasksStk[${CONFIG_SYS_COMMAND_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_CONSOLE_RTOS_IDX0 == "Standalone">
OS_TCB  _SYS_CONSOLE_IDX0_Tasks_TCB;
CPU_STK _SYS_CONSOLE_IDX0_TasksStk[${CONFIG_SYS_CONSOLE_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_CONSOLE_RTOS_IDX1 == "Standalone">
OS_TCB  _SYS_CONSOLE_IDX1_Tasks_TCB;
CPU_STK _SYS_CONSOLE_IDX1_TasksStk[${CONFIG_SYS_CONSOLE_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_RTCC_RTOS == "Standalone">
OS_TCB  _SYS_RTCC_Tasks_TCB;
CPU_STK _SYS_RTCC_TasksStk[${CONFIG_SYS_RTCC_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_DEVCON_RTOS == "Standalone">
OS_TCB  _SYS_DEVCON_Tasks_TCB;
CPU_STK _SYS_DEVCON_TasksStk[${CONFIG_SYS_DEVCON_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_SYS_DMA == true && CONFIG_SYS_DMA_RTOS == "Standalone">
OS_TCB  _SYS_DMA_Tasks_TCB;
CPU_STK _SYS_DMA_TasksStk[${CONFIG_SYS_DMA_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_SYS_FS == true && CONFIG_SYS_FS_RTOS == "Standalone">
OS_TCB  _SYS_FS_Tasks_TCB;
CPU_STK _SYS_FS_TasksStk[${CONFIG_SYS_FS_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_MSG_INST_IDX0 == true && CONFIG_SYS_MSG_RTOS_IDX0 == "Standalone">
OS_TCB  _SYS_MSG_IDX0_Tasks_TCB;
CPU_STK _SYS_MSG_IDX0_TasksStk[${CONFIG_SYS_MSG_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_MSG_INST_IDX1 == true && CONFIG_SYS_MSG_RTOS_IDX1 == "Standalone">
OS_TCB  _SYS_MSG_IDX1_Tasks_TCB;
CPU_STK _SYS_MSG_IDX1_TasksStk[${CONFIG_SYS_MSG_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_SYS_TMR == true && CONFIG_SYS_TMR_RTOS == "Standalone">
OS_TCB  _SYS_TMR_Tasks_TCB;
CPU_STK _SYS_TMR_TasksStk[${CONFIG_SYS_TMR_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_SYS_TOUCH == true && CONFIG_SYS_TOUCH_RTOS == "Standalone">
OS_TCB  _SYS_Touch_Tasks_TCB;
CPU_STK _SYS_Touch_TasksStk[${CONFIG_SYS_TOUCH_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_TCPIP_STACK && CONFIG_TCPIP_RTOS == "Standalone">
OS_TCB  _TCPIP_Tasks_TCB;
CPU_STK _TCPIP_TasksStk[${CONFIG_TCPIP_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USB_DEVICE_SUPPORT == true || CONFIG_DRV_USB_HOST_SUPPORT == true > 
<#if CONFIG_USE_USB_STACK && CONFIG_USB_RTOS == "Standalone">
OS_TCB  _USB_Tasks_TCB;
CPU_STK _USB_TasksStk[${CONFIG_USB_RTOS_TASK_SIZE}];
</#if>
</#if>
<#include "/framework/net/templates/system_tasks_rtos.c.standalone.ftl">
<#if CONFIG_APP_IDX_0?has_content>
OS_TCB  _${CONFIG_APP_NAME_0?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_0?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX0}];
<#else>
OS_TCB  _App_Tasks_TCB;
CPU_STK _App_TasksStk[${CONFIG_APP_TASK_SIZE_IDX0}];
</#if>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
OS_TCB  _${CONFIG_APP_NAME_1?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_1?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX1}];
</#if>
<#if CONFIG_APP_IDX_2 == true>
OS_TCB  _${CONFIG_APP_NAME_2?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_2?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX2}];
</#if>
<#if CONFIG_APP_IDX_3 == true>
OS_TCB  _${CONFIG_APP_NAME_3?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_3?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX3}];
</#if>
<#if CONFIG_APP_IDX_4 == true>
OS_TCB  _${CONFIG_APP_NAME_4?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_4?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX4}];
</#if>
<#if CONFIG_APP_IDX_5 == true>
OS_TCB  _${CONFIG_APP_NAME_5?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_5?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX5}];
</#if>
<#if CONFIG_APP_IDX_6 == true>
OS_TCB  _${CONFIG_APP_NAME_6?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_6?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX6}];
</#if>
<#if CONFIG_APP_IDX_7 == true>
OS_TCB  _${CONFIG_APP_NAME_7?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_7?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX7}];
</#if>
<#if CONFIG_APP_IDX_8 == true>
OS_TCB  _${CONFIG_APP_NAME_8?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_8?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX8}];
</#if>
<#if CONFIG_APP_IDX_9 == true>
OS_TCB  _${CONFIG_APP_NAME_9?upper_case}_Tasks_TCB;
CPU_STK _${CONFIG_APP_NAME_9?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX9}];
</#if>
</#if>
</#if><#-- end of CONFIG_3RDPARTY_RTOS_USED == ""uC/OS-III"" -->

<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
OS_STK _SYS_TasksStk[${CONFIG_FW_SYS_TASK_SIZE}];

<#if (CONFIG_DRV_CODEC_AK4384_RTOS == "Standalone") && (CONFIG_DRV_CODEC_AK4384_INST_IDX0 == true)>
OS_STK _DRV_CODEC_AK4384_TasksStk[${CONFIG_DRV_CODEC_AK4384_RTOS_TASK_SIZE}];
</#if>
<#if (CONFIG_DRV_CODEC_AK4953_RTOS == "Standalone") && (CONFIG_DRV_CODEC_AK4953_INST_IDX0 == true)>
OS_STK _DRV_CODEC_AK4953_TasksStk[${CONFIG_DRV_CODEC_AK4953_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INTERRUPT_MODE == false>
<#if CONFIG_DRV_I2C_INST_IDX0 == true && CONFIG_DRV_I2C_RTOS_IDX0 == "Standalone">
OS_STK _DRV_I2C_IDX0_TasksStk[${CONFIG_DRV_I2C_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX1 == true && CONFIG_DRV_I2C_RTOS_IDX1 == "Standalone">
OS_STK _DRV_I2C_IDX1_TasksStk[${CONFIG_DRV_I2C_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX2 == true && CONFIG_DRV_I2C_RTOS_IDX2 == "Standalone">
OS_STK_STK _DRV_I2C_IDX2_TasksStk[${CONFIG_DRV_I2C_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX3 == true && CONFIG_DRV_I2C_RTOS_IDX3 == "Standalone">
OS_STK _DRV_I2C_IDX3_TasksStk[${CONFIG_DRV_I2C_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX4 == true && CONFIG_DRV_I2C_RTOS_IDX4 == "Standalone">
OS_STK _DRV_I2C_IDX4_TasksStk[${CONFIG_DRV_I2C_IDX4_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_DRV_I2S_INTERRUPT_MODE == false>
<#if CONFIG_DRV_I2S_INST_IDX0 == true && CONFIG_DRV_I2S_RTOS_IDX0 == "Standalone">
OS_STK _DRV_I2S_IDX0_TasksStk[${CONFIG_DRV_I2S_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX1 == true && CONFIG_DRV_I2S_RTOS_IDX1 == "Standalone">
OS_STK _DRV_I2S_IDX1_TasksStk[${CONFIG_DRV_I2S_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX2 == true && CONFIG_DRV_I2S_RTOS_IDX2 == "Standalone">
OS_STK _DRV_I2S_IDX2_TasksStk[${CONFIG_DRV_I2S_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX3 == true && CONFIG_DRV_I2S_RTOS_IDX3 == "Standalone">
OS_STK _DRV_I2S_IDX3_TasksStk[${CONFIG_DRV_I2S_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX4 == true && CONFIG_DRV_I2S_RTOS_IDX4 == "Standalone">
OS_STK _DRV_I2S_IDX4_TasksStk[${CONFIG_DRV_I2S_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2S_INST_IDX5 == true && CONFIG_DRV_I2S_RTOS_IDX5 == "Standalone">
OS_STK _DRV_I2S_IDX5_TasksStk[${CONFIG_DRV_I2S_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_DRV_SDCARD_RTOS == "Standalone" && CONFIG_USE_DRV_SDCARD == true>
OS_STK _DRV_SDCARD_TasksStk[${CONFIG_DRV_SDCARD_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_USE_ISR_MODE == false>
<#if CONFIG_DRV_SPI_IDX0 == true && CONFIG_DRV_SPI_RTOS_IDX0 == "Standalone">
OS_STK _DRV_SPI_IDX0_TasksStk[${CONFIG_DRV_SPI_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX1 == true && CONFIG_DRV_SPI_RTOS_IDX1 == "Standalone">
OS_STK _DRV_SPI_IDX1_TasksStk[${CONFIG_DRV_SPI_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX2 == true && CONFIG_DRV_SPI_RTOS_IDX2 == "Standalone">
OS_STK _DRV_SPI_IDX2_TasksStk[${CONFIG_DRV_SPI_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX3 == true && CONFIG_DRV_SPI_RTOS_IDX3 == "Standalone">
OS_STK _DRV_SPI_IDX3_TasksStk[${CONFIG_DRV_SPI_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX4 == true && CONFIG_DRV_SPI_RTOS_IDX4 == "Standalone">
OS_STK _DRV_SPI_IDX4_TasksStk[${CONFIG_DRV_SPI_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX5 == true && CONFIG_DRV_SPI_RTOS_IDX5 == "Standalone">
OS_STK _DRV_SPI_IDX5_TasksStk[${CONFIG_DRV_SPI_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_DRV_SST25VF016B_INST_IDX0 == true && CONFIG_DRV_SST25VF016B_RTOS_IDX0 == "Standalone">
OS_STK _DRV_SST25VF016B_IDX0_TasksStk[${CONFIG_DRV_SST25VF016B_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF016B_INST_IDX1 == true && CONFIG_DRV_SST25VF016B_RTOS_IDX1 == "Standalone">
OS_STK _DRV_SST25VF016B_IDX1_TasksStk[${CONFIG_DRV_SST25VF016B_IDX1_RTOS_TASK_SIZE}];

</#if>
<#if CONFIG_USE_DRV_IPF == true && CONFIG_DRV_IPF_RTOS == "Standalone">
OS_STK _DRV_IPF_TasksStk[${CONFIG_DRV_IPF_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25_INST_IDX0 == true && CONFIG_DRV_SST25_RTOS_IDX0 == "Standalone">
OS_STK _DRV_SST25_IDX0_TasksStk[${CONFIG_DRV_SST25_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25_INST_IDX1 == true && CONFIG_DRV_SST25_RTOS_IDX1 == "Standalone">
OS_STK _DRV_SST25_IDX1_TasksStk[${CONFIG_DRV_SST25_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF020B_INST_IDX0 == true && CONFIG_DRV_SST25VF020B_RTOS_IDX0 == "Standalone">
OS_STK _DRV_SST25VF020B_IDX0_TasksStk[${CONFIG_DRV_SST25VF020B_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF020B_INST_IDX1 == true && CONFIG_DRV_SST25VF020B_RTOS_IDX1 == "Standalone">
OS_STK _DRV_SST25VF020B_IDX1_TasksStk[${CONFIG_DRV_SST25VF020B_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_0 == true && CONFIG_DRV_TMR_RTOS_IDX0 == "Standalone">
OS_STK _DRV_TMR_IDX0_TasksStk[${CONFIG_DRV_TMR_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_1 == true && CONFIG_DRV_TMR_RTOS_IDX1 == "Standalone">
OS_STK _DRV_TMR_IDX1_TasksStk[${CONFIG_DRV_TMR_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_2 == true && CONFIG_DRV_TMR_RTOS_IDX2 == "Standalone">
OS_STK _DRV_TMR_IDX2_TasksStk[${CONFIG_DRV_TMR_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_3 == true && CONFIG_DRV_TMR_RTOS_IDX3 == "Standalone">
OS_STK _DRV_TMR_IDX3_TasksStk[${CONFIG_DRV_TMR_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_4 == true && CONFIG_DRV_TMR_RTOS_IDX4 == "Standalone">
OS_STK _DRV_TMR_IDX4_TasksStk[${CONFIG_DRV_TMR_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_5 == true && CONFIG_DRV_TMR_RTOS_IDX5 == "Standalone">
OS_STK _DRV_TMR_IDX5_TasksStk[${CONFIG_DRV_TMR_IDX5_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_6 == true && CONFIG_DRV_TMR_RTOS_IDX6 == "Standalone">
OS_STK _DRV_TMR_IDX6_TasksStk[${CONFIG_DRV_TMR_IDX6_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_7 == true && CONFIG_DRV_TMR_RTOS_IDX7 == "Standalone">
OS_STK _DRV_TMR_IDX7_TasksStk[${CONFIG_DRV_TMR_IDX7_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_8 == true && CONFIG_DRV_TMR_RTOS_IDX8 == "Standalone">
OS_STK _DRV_TMR_IDX8_TasksStk[${CONFIG_DRV_TMR_IDX8_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true && CONFIG_DRV_TOUCH_ADC10BIT_RTOS == "Standalone">
OS_STK _DRV_TOUCH_ADC10BIT_TasksStk[${CONFIG_DRV_TOUCH_ADC10BIT_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true && CONFIG_DRV_TOUCH_MTCH6301_RTOS == "Standalone">
OS_STK _DRV_TOUCH_MTCH6301_TasksStk[${CONFIG_DRV_TOUCH_MTCH6301_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INTERRUPT_MODE == false>
<#if CONFIG_DRV_USART_INST_IDX0 == true && CONFIG_DRV_USART_RTOS_IDX0 == "Standalone">
OS_STK _DRV_USART_IDX0_TasksStk[${CONFIG_DRV_USART_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX1 == true && CONFIG_DRV_USART_RTOS_IDX1 == "Standalone">
OS_STK _DRV_USART_IDX1_TasksStk[${CONFIG_DRV_USART_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX2 == true && CONFIG_DRV_USART_RTOS_IDX2 == "Standalone">
OS_STK _DRV_USART_IDX2_TasksStk[${CONFIG_DRV_USART_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX3 == true && CONFIG_DRV_USART_RTOS_IDX3 == "Standalone">
OS_STK _DRV_USART_IDX3_TasksStk[${CONFIG_DRV_USART_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX4 == true && CONFIG_DRV_USART_RTOS_IDX4 == "Standalone">
OS_STK _DRV_USART_IDX4_TasksStk[${CONFIG_DRV_USART_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX5 == true && CONFIG_DRV_USART_RTOS_IDX5 == "Standalone">
OS_STK _DRV_USART_IDX5_TasksStk[${CONFIG_DRV_USART_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_USE_GFX_STACK && CONFIG_GFX_RTOS == "Standalone">
OS_STK _GFX_TasksStk[${CONFIG_GFX_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN == true && CONFIG_GFX_HGC_RTOS == "Standalone">
OS_STK _GFX_HGC_TasksStk[${GFX_HGC_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_COMMAND_RTOS == "Standalone">
OS_STK _SYS_COMMAND_TasksStk[${CONFIG_SYS_COMMAND_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_CONSOLE_RTOS_IDX0 == "Standalone">
OS_STK _SYS_CONSOLE_IDX0_TasksStk[${CONFIG_SYS_CONSOLE_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_CONSOLE_RTOS_IDX1 == "Standalone">
OS_STK _SYS_CONSOLE_IDX1_TasksStk[${CONFIG_SYS_CONSOLE_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_RTCC_RTOS == "Standalone">
OS_STK _SYS_RTCC_TasksStk[${CONFIG_SYS_RTCC_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_DEVCON_RTOS == "Standalone">
OS_STK _SYS_DEVCON_TasksStk[${CONFIG_SYS_DEVCON_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_SYS_DMA == true && CONFIG_SYS_DMA_RTOS == "Standalone">
OS_STK _SYS_DMA_TasksStk[${CONFIG_SYS_DMA_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_SYS_FS == true && CONFIG_SYS_FS_RTOS == "Standalone">
OS_STK _SYS_FS_TasksStk[${CONFIG_SYS_FS_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_MSG_INST_IDX0 == true && CONFIG_SYS_MSG_RTOS_IDX0 == "Standalone">
OS_STK _SYS_MSG_IDX0_TasksStk[${CONFIG_SYS_MSG_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_SYS_MSG_INST_IDX1 == true && CONFIG_SYS_MSG_RTOS_IDX1 == "Standalone">
OS_STK _SYS_MSG_IDX1_TasksStk[${CONFIG_SYS_MSG_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_SYS_TMR == true && CONFIG_SYS_TMR_RTOS == "Standalone">
OS_STK _SYS_TMR_TasksStk[${CONFIG_SYS_TMR_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_SYS_TOUCH == true && CONFIG_SYS_TOUCH_RTOS == "Standalone">
OS_STK _SYS_Touch_TasksStk[${CONFIG_SYS_TOUCH_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_USE_TCPIP_STACK && CONFIG_TCPIP_RTOS == "Standalone">
OS_STK _TCPIP_TasksStk[${CONFIG_TCPIP_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USB_DEVICE_SUPPORT == true || CONFIG_DRV_USB_HOST_SUPPORT == true>
<#if CONFIG_USE_USB_STACK && CONFIG_USB_RTOS == "Standalone">
OS_STK _USB_TasksStk[${CONFIG_USB_RTOS_TASK_SIZE}];
</#if>
</#if>
<#include "/framework/net/templates/system_tasks_rtos.c.standalone.stk.ftl">
<#if CONFIG_APP_IDX_0?has_content>
OS_STK _${CONFIG_APP_NAME_0?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX0}];
<#else>
OS_STK _App_TasksStk[${CONFIG_APP_TASK_SIZE_IDX0}];
</#if>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
OS_STK _${CONFIG_APP_NAME_1?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX1}];
</#if>
<#if CONFIG_APP_IDX_2 == true>
OS_STK _${CONFIG_APP_NAME_2?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX2}];
</#if>
<#if CONFIG_APP_IDX_3 == true>
OS_STK _${CONFIG_APP_NAME_3?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX3}];
</#if>
<#if CONFIG_APP_IDX_4 == true>
OS_STK _${CONFIG_APP_NAME_4?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX4}];
</#if>
<#if CONFIG_APP_IDX_5 == true>
OS_STK _${CONFIG_APP_NAME_5?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX5}];
</#if>
<#if CONFIG_APP_IDX_6 == true>
OS_STK _${CONFIG_APP_NAME_6?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX6}];
</#if>
<#if CONFIG_APP_IDX_7 == true>
OS_STK _${CONFIG_APP_NAME_7?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX7}];
</#if>
<#if CONFIG_APP_IDX_8 == true>
OS_STK _${CONFIG_APP_NAME_8?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX8}];
</#if>
<#if CONFIG_APP_IDX_9 == true>
OS_STK _${CONFIG_APP_NAME_9?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX9}];
</#if>
</#if>
</#if><#-- end of CONFIG_3RDPARTY_RTOS_USED == ""uC/OS-II"" -->

<#if CONFIG_USE_3RDPARTY_RTOS && CONFIG_3RDPARTY_RTOS_USED == "ThreadX">

<#assign THREADX_TOTAL_THREADSTK_SIZE = 512?number>
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_FW_SYS_TASK_SIZE?number> <#-- all values seem to be passed in as strings.  Convert to a number, using FreeMarker directives, so we can do arthmetic calculations to get total stack size   Added additional memory for safeguard, since each threads stack created adds additional memory for the request -->
uint8_t*   _sys_tx_thread_stk_ptr;

/*create any necessary threadx rtos resources*/
TX_BYTE_POOL _sys_byte_pool_0;
TX_THREAD  _SYS_Tasks_TCB;
<#if CONFIG_DRV_CODEC_AK4384_RTOS == "Standalone">
<#if CONFIG_DRV_CODEC_AK4384_INST_IDX0 == true>
TX_THREAD  _DRV_CODEC_AK4384_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_CODEC_AK4384_RTOS_TASK_SIZE?number>
</#if>
</#if>
<#if CONFIG_DRV_CODEC_AK4953_RTOS == "Standalone">
<#if CONFIG_DRV_CODEC_AK4953_INST_IDX0 == true>
TX_THREAD  _DRV_CODEC_AK4953_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_CODEC_AK4953_RTOS_TASK_SIZE?number>
</#if>
</#if>
<#if CONFIG_DRV_I2C_INTERRUPT_MODE == false>
<#if CONFIG_DRV_I2C_INST_IDX0 == true && CONFIG_DRV_I2C_RTOS_IDX0 == "Standalone">
TX_THREAD  _DRV_I2C_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2C_IDX0_RTOS_TASK_SIZE?number>
w</#if>
<#if CONFIG_DRV_I2C_INST_IDX1 == true && CONFIG_DRV_I2C_RTOS_IDX1 == "Standalone">
TX_THREAD  _DRV_I2C_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2C_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX2 == true && CONFIG_DRV_I2C_RTOS_IDX2 == "Standalone">
TX_THREAD  _DRV_I2C_IDX2_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2C_IDX2_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX3 == true && CONFIG_DRV_I2C_RTOS_IDX3 == "Standalone">
TX_THREAD  _DRV_I2C_IDX3_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2C_IDX3_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX4 == true && CONFIG_DRV_I2C_RTOS_IDX4 == "Standalone">
TX_THREAD  _DRV_I2C_IDX4_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2C_IDX4_RTOS_TASK_SIZE?number>
</#if>
</#if>
<#if CONFIG_DRV_I2S_INTERRUPT_MODE == false>
<#if CONFIG_DRV_I2S_INST_IDX0 == true && CONFIG_DRV_I2S_RTOS_IDX0 == "Standalone">
TX_THREAD  _DRV_I2S_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2S_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_I2S_INST_IDX1 == true && CONFIG_DRV_I2S_RTOS_IDX1 == "Standalone">
TX_THREAD  _DRV_I2S_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2S_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_I2S_INST_IDX2 == true && CONFIG_DRV_I2S_RTOS_IDX2 == "Standalone">
TX_THREAD  _DRV_I2S_IDX2_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2S_IDX2_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_I2S_INST_IDX3 == true && CONFIG_DRV_I2S_RTOS_IDX3 == "Standalone">
TX_THREAD  _DRV_I2S_IDX3_Tasks_TCB
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2S_IDX3_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_I2S_INST_IDX4 == true && CONFIG_DRV_I2S_RTOS_IDX4 == "Standalone">
TX_THREAD  _DRV_I2S_IDX4_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2S_IDX3_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_I2S_INST_IDX5 == true && CONFIG_DRV_I2S_RTOS_IDX5 == "Standalone">
TX_THREAD  _DRV_I2S_IDX5_Tasks_TCB
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_I2S_IDX5_RTOS_TASK_SIZE?number>
</#if>
</#if>
<#if CONFIG_DRV_SDCARD_RTOS == "Standalone">
<#if CONFIG_USE_DRV_SDCARD == true>
TX_THREAD  _DRV_SDCARD_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SDCARD_RTOS_TASK_SIZE?number>
</#if>
</#if>
<#if CONFIG_DRV_SPI_USE_ISR_MODE == false>
<#if CONFIG_DRV_SPI_IDX0 == true && CONFIG_DRV_SPI_RTOS_IDX0 == "Standalone">
TX_THREAD  _DRV_SPI_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SPI_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SPI_IDX1 == true && CONFIG_DRV_SPI_RTOS_IDX1 == "Standalone">
TX_THREAD  _DRV_SPI_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SPI_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SPI_IDX2 == true && CONFIG_DRV_SPI_RTOS_IDX2 == "Standalone">
TX_THREAD  _DRV_SPI_IDX2_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SPI_IDX2_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SPI_IDX3 == true && CONFIG_DRV_SPI_RTOS_IDX3 == "Standalone">
TX_THREAD  _DRV_SPI_IDX3_Tasks_TCB
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SPI_IDX3_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SPI_IDX4 == true && CONFIG_DRV_SPI_RTOS_IDX4 == "Standalone">
TX_THREAD  _DRV_SPI_IDX4_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SPI_IDX4_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SPI_IDX5 == true && CONFIG_DRV_SPI_RTOS_IDX5 == "Standalone">
TX_THREAD  _DRV_SPI_IDX5_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SPI_IDX5_RTOS_TASK_SIZE?number>
</#if>
</#if>
<#if CONFIG_DRV_SST25VF016B_INST_IDX0 == true && CONFIG_DRV_SST25VF016B_RTOS_IDX0 == "Standalone">
TX_THREAD  _DRV_SST25VF016B_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SST25VF016B_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SST25VF016B_INST_IDX1 == true && CONFIG_DRV_SST25VF016B_RTOS_IDX1 == "Standalone">
TX_THREAD  _DRV_SST25VF016B_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SST25VF016B_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_USE_DRV_IPF == true && CONFIG_DRV_IPF_RTOS == "Standalone">
TX_THREAD  _DRV_IPF_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_IPF_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SST25_INST_IDX0 == true && CONFIG_DRV_SST25_RTOS_IDX0 == "Standalone">
TX_THREAD  _DRV_SST25_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SST25_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SST25_INST_IDX1 == true && CONFIG_DRV_SST25_RTOS_IDX1 == "Standalone">
TX_THREAD  _DRV_SST25_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SST25_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SST25VF020B_INST_IDX0 == true && CONFIG_DRV_SST25VF020B_RTOS_IDX0 == "Standalone">
TX_THREAD  _DRV_SST25VF020B_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SST25VF020B_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_SST25VF020B_INST_IDX1 == true && CONFIG_DRV_SST25VF020B_RTOS_IDX1 == "Standalone">
TX_THREAD  _DRV_SST25VF020B_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_SST25VF020B_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_0 == true && CONFIG_DRV_TMR_RTOS_IDX0 == "Standalone">
TX_THREAD  _DRV_TMR_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_1 == true && CONFIG_DRV_TMR_RTOS_IDX1 == "Standalone">
TX_THREAD  _DRV_TMR_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_2 == true && CONFIG_DRV_TMR_RTOS_IDX2 == "Standalone">
TX_THREAD  _DRV_TMR_IDX2_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX2_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_3 == true && CONFIG_DRV_TMR_RTOS_IDX3 == "Standalone">
TX_THREAD  _DRV_TMR_IDX3_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX3_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_4 == true && CONFIG_DRV_TMR_RTOS_IDX4 == "Standalone">
TX_THREAD  _DRV_TMR_IDX4_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX4_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_5 == true && CONFIG_DRV_TMR_RTOS_IDX5 == "Standalone">
TX_THREAD  _DRV_TMR_IDX5_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX5_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_6 == true && CONFIG_DRV_TMR_RTOS_IDX6 == "Standalone">
TX_THREAD  _DRV_TMR_IDX6_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX6_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_7 == true && CONFIG_DRV_TMR_RTOS_IDX7 == "Standalone">
TX_THREAD  _DRV_TMR_IDX7_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX7_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_TMR_INST_8 == true && CONFIG_DRV_TMR_RTOS_IDX8 == "Standalone">
TX_THREAD  _DRV_TMR_IDX8_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TMR_IDX8_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true && CONFIG_DRV_TOUCH_ADC10BIT_RTOS == "Standalone">
TX_THREAD  _DRV_TOUCH_ADC10BIT_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TOUCH_ADC10BIT_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true && CONFIG_DRV_TOUCH_MTCH6301_RTOS == "Standalone">
TX_THREAD  _DRV_TOUCH_MTCH6301_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_TOUCH_MTCH6301_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_USART_INTERRUPT_MODE == false>
<#if CONFIG_DRV_USART_INST_IDX0 == true && CONFIG_DRV_USART_RTOS_IDX0 == "Standalone">
TX_THREAD  _DRV_USART_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_USART_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_USART_INST_IDX1 == true && CONFIG_DRV_USART_RTOS_IDX1 == "Standalone">
TX_THREAD  _DRV_USART_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_USART_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_USART_INST_IDX2 == true && CONFIG_DRV_USART_RTOS_IDX2 == "Standalone">
TX_THREAD  _DRV_USART_IDX2_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_USART_IDX2_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_USART_INST_IDX3 == true && CONFIG_DRV_USART_RTOS_IDX3 == "Standalone">
TX_THREAD  _DRV_USART_IDX3_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_USART_IDX3_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_USART_INST_IDX4 == true && CONFIG_DRV_USART_RTOS_IDX4 == "Standalone">
TX_THREAD  _DRV_USART_IDX4_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_USART_IDX4_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_USART_INST_IDX5 == true && CONFIG_DRV_USART_RTOS_IDX5 == "Standalone">
TX_THREAD  _DRV_USART_IDX5_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_DRV_USART_IDX5_RTOS_TASK_SIZE?number>
</#if>
</#if>
<#if CONFIG_USE_GFX_STACK && CONFIG_GFX_RTOS == "Standalone">
TX_THREAD  _GFX_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_GFX_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN && CONFIG_GFX_RTOS == "Standalone">
TX_THREAD  _GFX_HGC_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_GFX_HGC_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_SYS_COMMAND_RTOS == "Standalone">
TX_THREAD  _SYS_COMMAND_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_COMMAND_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_SYS_CONSOLE_RTOS_IDX0 == "Standalone">
TX_THREAD  _SYS_CONSOLE_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_CONSOLE_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_SYS_CONSOLE_RTOS_IDX1 == "Standalone">
TX_THREAD  _SYS_CONSOLE_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_CONSOLE_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_SYS_RTCC_RTOS == "Standalone">
TX_THREAD  _SYS_RTCC_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_RTCC_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_SYS_DEVCON_RTOS == "Standalone">
TX_THREAD  _SYS_DEVCON_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_DEVCON_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_USE_SYS_DMA == true && CONFIG_SYS_DMA_RTOS == "Standalone">
TX_THREAD  _SYS_DMA_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_DMA_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_USE_SYS_FS == true && CONFIG_SYS_FS_RTOS == "Standalone">
TX_THREAD  _SYS_FS_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_FS_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_SYS_MSG_INST_IDX0 == true && CONFIG_SYS_MSG_RTOS_IDX0 == "Standalone">
TX_THREAD  _SYS_MSG_IDX0_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_MSG_IDX0_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_SYS_MSG_INST_IDX1 == true && CONFIG_SYS_MSG_RTOS_IDX1 == "Standalone">
TX_THREAD  _SYS_MSG_IDX1_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_MSG_IDX1_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_USE_SYS_TMR == true && CONFIG_SYS_TMR_RTOS == "Standalone">
TX_THREAD  _SYS_TMR_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_TMR_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_USE_SYS_TOUCH == true && CONFIG_SYS_TOUCH_RTOS == "Standalone">
TX_THREAD  _SYS_Touch_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_SYS_TOUCH_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_USE_TCPIP_STACK && CONFIG_TCPIP_RTOS == "Standalone">
TX_THREAD  _TCPIP_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_TCPIP_RTOS_TASK_SIZE?number>
</#if>
<#if CONFIG_DRV_USB_DEVICE_SUPPORT == true || CONFIG_DRV_USB_HOST_SUPPORT == true>
<#if CONFIG_USE_USB_STACK && CONFIG_USB_RTOS == "Standalone">
TX_THREAD  _USB_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_USB_RTOS_TASK_SIZE?number>
</#if>
</#if>
<#if CONFIG_APP_IDX_0?has_content>
TX_THREAD  _${CONFIG_APP_NAME_0?upper_case}_Tasks_TCB;
<#else>
TX_THREAD  _APP_Tasks_TCB;
</#if>
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX0?number>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
TX_THREAD  _${CONFIG_APP_NAME_1?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX1?number>
</#if>
<#if CONFIG_APP_IDX_2 == true>
TX_THREAD  _${CONFIG_APP_NAME_2?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX2?number>
</#if>
<#if CONFIG_APP_IDX_3 == true>
TX_THREAD  _${CONFIG_APP_NAME_3?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX3?number>
</#if>
<#if CONFIG_APP_IDX_4 == true>
TX_THREAD  _${CONFIG_APP_NAME_4?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX4?number>
</#if>
<#if CONFIG_APP_IDX_5 == true>
TX_THREAD  _${CONFIG_APP_NAME_5?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX5?number>
</#if>
<#if CONFIG_APP_IDX_6 == true>
TX_THREAD  _${CONFIG_APP_NAME_6?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX6?number>
</#if>
<#if CONFIG_APP_IDX_7 == true>
TX_THREAD  _${CONFIG_APP_NAME_7?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX7?number>
</#if>
<#if CONFIG_APP_IDX_8 == true>
TX_THREAD  _${CONFIG_APP_NAME_8?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX8?number>
</#if>
<#if CONFIG_APP_IDX_9 == true>
TX_THREAD  _${CONFIG_APP_NAME_9?upper_case}_Tasks_TCB;
<#assign THREADX_TOTAL_THREADSTK_SIZE = THREADX_TOTAL_THREADSTK_SIZE + CONFIG_APP_TASK_SIZE_IDX9?number>
</#if>
</#if>
</#if> <#-- end of CONFIG_3RDPARTY_RTOS_USED == "ThreadX" -->
<#if CONFIG_3RDPARTY_RTOS_USED == "embOS"><#-- start of embOS variables -->

OS_TASK  _SYS_Tasks_TCB;
uint32_t _SYS_TasksStk[${CONFIG_FW_SYS_TASK_SIZE}];

<#if CONFIG_DRV_CODEC_AK4384_RTOS == "Standalone">
<#if CONFIG_DRV_CODEC_AK4384_INST_IDX0 == true>
OS_TASK  _DRV_CODEC_AK4384_Tasks_TCB;
uint32_t _DRV_CODEC_AK4384_TasksStk[${CONFIG_DRV_CODEC_AK4384_RTOS_TASK_SIZE}];
</#if>
</#if>
<#if CONFIG_DRV_CODEC_AK4953_RTOS == "Standalone">
<#if CONFIG_DRV_CODEC_AK4953_INST_IDX0 == true>
OS_TASK  _DRV_CODEC_AK4953_Tasks_TCB;
uint32_t _DRV_CODEC_AK4953_TasksStk[${CONFIG_DRV_CODEC_AK4953_RTOS_TASK_SIZE}];
</#if>
</#if>

<#if CONFIG_DRV_I2C_INTERRUPT_MODE == false>
<#if CONFIG_DRV_I2C_INST_IDX0 == true && CONFIG_DRV_I2C_RTOS_IDX0 == "Standalone">
OS_TASK  _DRV_I2C_IDX0_Tasks_TCB;
uint32_t _DRV_I2C_IDX0_TasksStk[${CONFIG_DRV_I2C_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX1 == true && CONFIG_DRV_I2C_RTOS_IDX1 == "Standalone">
OS_TASK  _DRV_I2C_IDX1_Tasks_TCB;
uint32_t _DRV_I2C_IDX1_TasksStk[${CONFIG_DRV_I2C_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX2 == true && CONFIG_DRV_I2C_RTOS_IDX2 == "Standalone">
OS_TASK  _DRV_I2C_IDX2_Tasks_TCB;
uint32_t _DRV_I2C_IDX2_TasksStk[${CONFIG_DRV_I2C_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX3 == true && CONFIG_DRV_I2C_RTOS_IDX3 == "Standalone">
OS_TASK  _DRV_I2C_IDX3_Tasks_TCB;
uint32_t _DRV_I2C_IDX3_TasksStk[${CONFIG_DRV_I2C_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_I2C_INST_IDX4 == true && CONFIG_DRV_I2C_RTOS_IDX4 == "Standalone">
OS_TASK  _DRV_I2C_IDX4_Tasks_TCB;
uint32_t _DRV_I2C_IDX4_TasksStk[${CONFIG_DRV_I2C_IDX4_RTOS_TASK_SIZE}];
</#if>
</#if>

<#if CONFIG_DRV_I2S_INTERRUPT_MODE == false>
<#if CONFIG_DRV_I2S_INST_IDX0 == true && CONFIG_DRV_I2S_RTOS_IDX0 == "Standalone">
OS_TASK  _DRV_I2S_IDX0_Tasks_TCB;
uint32_t _DRV_I2S_IDX0_TasksStk[${CONFIG_DRV_I2S_IDX0_RTOS_TASK_SIZE}];

</#if>
<#if CONFIG_DRV_I2S_INST_IDX1 == true && CONFIG_DRV_I2S_RTOS_IDX1 == "Standalone">
OS_TASK  _DRV_I2S_IDX1_Tasks_TCB;
uint32_t _DRV_I2S_IDX1_TasksStk[${CONFIG_DRV_I2S_IDX1_RTOS_TASK_SIZE}];

</#if>
<#if CONFIG_DRV_I2S_INST_IDX2 == true && CONFIG_DRV_I2S_RTOS_IDX2 == "Standalone">
OS_TASK  _DRV_I2S_IDX2_Tasks_TCB;
uint32_t _DRV_I2S_IDX2_TasksStk[${CONFIG_DRV_I2S_IDX2_RTOS_TASK_SIZE}];

</#if>
<#if CONFIG_DRV_I2S_INST_IDX3 == true && CONFIG_DRV_I2S_RTOS_IDX3 == "Standalone">
OS_TASK  _DRV_I2S_IDX3_Tasks_TCB;
uint32_t _DRV_I2S_IDX3_TasksStk[${CONFIG_DRV_I2S_IDX3_RTOS_TASK_SIZE}];

</#if>
<#if CONFIG_DRV_I2S_INST_IDX4 == true && CONFIG_DRV_I2S_RTOS_IDX4 == "Standalone">
OS_TASK  _DRV_I2S_IDX4_Tasks_TCB;
uint32_t _DRV_I2S_IDX4_TasksStk[${CONFIG_DRV_I2S_IDX4_RTOS_TASK_SIZE}];

</#if>
<#if CONFIG_DRV_I2S_INST_IDX5 == true && CONFIG_DRV_I2S_RTOS_IDX5 == "Standalone">
OS_TASK  _DRV_I2S_IDX5_Tasks_TCB;
uint32_t _DRV_I2S_IDX5_TasksStk[${CONFIG_DRV_I2S_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>

<#if  CONFIG_DRV_SDCARD_RTOS == "Standalone">
<#if CONFIG_USE_DRV_SDCARD == true>
OS_TASK  _DRV_SDCARD_Tasks_TCB;
uint32_t _DRV_SDCARD_TasksStk[${CONFIG_DRV_SDCARD_RTOS_TASK_SIZE}];
</#if>
</#if>

<#if CONFIG_DRV_SPI_USE_ISR_MODE == false>
<#if CONFIG_DRV_SPI_IDX0 == true && CONFIG_DRV_SPI_RTOS_IDX0 == "Standalone">
OS_TASK  _DRV_SPI_IDX0_Tasks_TCB;
uint32_t _DRV_SPI_IDX0_TasksStk[${CONFIG_DRV_SPI_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX1 == true && CONFIG_DRV_SPI_RTOS_IDX1 == "Standalone">
OS_TASK  _DRV_SPI_IDX1_Tasks_TCB;
uint32_t _DRV_SPI_IDX1_TasksStk[${CONFIG_DRV_SPI_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX2 == true && CONFIG_DRV_SPI_RTOS_IDX2 == "Standalone">
OS_TASK  _DRV_SPI_IDX2_Tasks_TCB;
uint32_t _DRV_SPI_IDX2_TasksStk[${CONFIG_DRV_SPI_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX3 == true && CONFIG_DRV_SPI_RTOS_IDX3 == "Standalone">
OS_TASK  _DRV_SPI_IDX3_Tasks_TCB;
uint32_t _DRV_SPI_IDX3_TasksStk[${CONFIG_DRV_SPI_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX4 == true && CONFIG_DRV_SPI_RTOS_IDX4 == "Standalone">
OS_TASK  _DRV_SPI_IDX4_Tasks_TCB;
uint32_t _DRV_SPI_IDX4_TasksStk[${CONFIG_DRV_SPI_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SPI_IDX5 == true && CONFIG_DRV_SPI_RTOS_IDX5 == "Standalone">
OS_TASK  _DRV_SPI_IDX5_Tasks_TCB;
uint32_t _DRV_SPI_IDX5_TasksStk[${CONFIG_DRV_SPI_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>

<#if CONFIG_DRV_SST25VF016B_INST_IDX0 == true && CONFIG_DRV_SST25VF016B_RTOS_IDX0 == "Standalone">
OS_TASK  _DRV_SST25VF016B_IDX0_Tasks_TCB;
uint32_t _DRV_SST25VF016B_IDX0_TasksStk[${CONFIG_DRV_SST25VF016B_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF016B_INST_IDX1 == true && CONFIG_DRV_SST25VF016B_RTOS_IDX1 == "Standalone">
OS_TASK  _DRV_SST25VF016B_IDX1_Tasks_TCB;
uint32_t _DRV_SST25VF016B_IDX1_TasksStk[${CONFIG_DRV_SST25VF016B_IDX1_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_USE_DRV_IPF == true && CONFIG_DRV_IPF_RTOS == "Standalone">
OS_TASK  _DRV_IPF_Tasks_TCB;
uint32_t _DRV_IPF_TasksStk[${CONFIG_DRV_IPF_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25_INST_IDX0 == true && CONFIG_DRV_SST25_RTOS_IDX0 == "Standalone">
OS_TASK  _DRV_SST25_IDX0_Tasks_TCB;
uint32_t _DRV_SST25_IDX0_TasksStk[${CONFIG_DRV_SST25_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25_INST_IDX1 == true && CONFIG_DRV_SST25_RTOS_IDX1 == "Standalone">
OS_TASK  _DRV_SST25_IDX1_Tasks_TCB;
uint32_t _DRV_SST25_IDX1_TasksStk[${CONFIG_DRV_SST25_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF020B_INST_IDX0 == true && CONFIG_DRV_SST25VF020B_RTOS_IDX0 == "Standalone">
OS_TASK  _DRV_SST25VF020B_IDX0_Tasks_TCB;
uint32_t _DRV_SST25VF020B_IDX0_TasksStk[${CONFIG_DRV_SST25VF020B_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_SST25VF020B_INST_IDX1 == true && CONFIG_DRV_SST25VF020B_RTOS_IDX1 == "Standalone">
OS_TASK  _DRV_SST25VF020B_IDX1_Tasks_TCB;
uint32_t _DRV_SST25VF020B_IDX1_TasksStk[${CONFIG_DRV_SST25VF020B_IDX1_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_DRV_TMR_INST_0 == true && CONFIG_DRV_TMR_RTOS_IDX0 == "Standalone">
OS_TASK  _DRV_TMR_IDX0_Tasks_TCB;
uint32_t _DRV_TMR_IDX0_TasksStk[${CONFIG_DRV_TMR_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_1 == true && CONFIG_DRV_TMR_RTOS_IDX1 == "Standalone">
OS_TASK  _DRV_TMR_IDX1_Tasks_TCB;
uint32_t _DRV_TMR_IDX1_TasksStk[${CONFIG_DRV_TMR_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_2 == true && CONFIG_DRV_TMR_RTOS_IDX2 == "Standalone">
OS_TASK  _DRV_TMR_IDX2_Tasks_TCB;
uint32_t _DRV_TMR_IDX2_TasksStk[${CONFIG_DRV_TMR_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_3 == true && CONFIG_DRV_TMR_RTOS_IDX3 == "Standalone">
OS_TASK  _DRV_TMR_IDX3_Tasks_TCB;
uint32_t _DRV_TMR_IDX3_TasksStk[${CONFIG_DRV_TMR_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_4 == true && CONFIG_DRV_TMR_RTOS_IDX4 == "Standalone">
OS_TASK  _DRV_TMR_IDX4_Tasks_TCB;
uint32_t _DRV_TMR_IDX4_TasksStk[${CONFIG_DRV_TMR_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_5 == true && CONFIG_DRV_TMR_RTOS_IDX5 == "Standalone">
OS_TASK  _DRV_TMR_IDX5_Tasks_TCB;
uint32_t _DRV_TMR_IDX5_TasksStk[${CONFIG_DRV_TMR_IDX5_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_6 == true && CONFIG_DRV_TMR_RTOS_IDX6 == "Standalone">
OS_TASK  _DRV_TMR_IDX6_Tasks_TCB;
uint32_t _DRV_TMR_IDX6_TasksStk[${CONFIG_DRV_TMR_IDX6_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_7 == true && CONFIG_DRV_TMR_RTOS_IDX7 == "Standalone">
OS_TASK  _DRV_TMR_IDX7_Tasks_TCB;
uint32_t _DRV_TMR_IDX7_TasksStk[${CONFIG_DRV_TMR_IDX7_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_TMR_INST_8 == true && CONFIG_DRV_TMR_RTOS_IDX8 == "Standalone">
OS_TASK  _DRV_TMR_IDX8_Tasks_TCB;
uint32_t _DRV_TMR_IDX8_TasksStk[${CONFIG_DRV_TMR_IDX8_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true && CONFIG_DRV_TOUCH_ADC10BIT_RTOS == "Standalone">
extern OS_TASK  _DRV_TOUCH_ADC10BIT_Tasks_TCB;
extern uint32_t _DRV_TOUCH_ADC10BIT_TasksStk[${CONFIG_DRV_TOUCH_ADC10BIT_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true && CONFIG_DRV_TOUCH_MTCH6301_RTOS == "Standalone">
OS_TASK  _DRV_TOUCH_MTCH6301_Tasks_TCB;
uint32_t _DRV_TOUCH_MTCH6301_TasksStk[${CONFIG_DRV_TOUCH_MTCH6301_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_DRV_USART_INTERRUPT_MODE == false>
<#if CONFIG_DRV_USART_INST_IDX0 == true && CONFIG_DRV_USART_RTOS_IDX0 == "Standalone">
OS_TASK  _DRV_USART_IDX0_Tasks_TCB;
uint32_t _DRV_USART_IDX0_TasksStk[${CONFIG_DRV_USART_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX1 == true && CONFIG_DRV_USART_RTOS_IDX1 == "Standalone">
OS_TASK  _DRV_USART_IDX1_Tasks_TCB;
uint32_t _DRV_USART_IDX1_TasksStk[${CONFIG_DRV_USART_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX2 == true && CONFIG_DRV_USART_RTOS_IDX2 == "Standalone">
OS_TASK  _DRV_USART_IDX2_Tasks_TCB;
uint32_t _DRV_USART_IDX2_TasksStk[${CONFIG_DRV_USART_IDX2_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX3 == true && CONFIG_DRV_USART_RTOS_IDX3 == "Standalone">
OS_TASK  _DRV_USART_IDX3_Tasks_TCB;
uint32_t _DRV_USART_IDX3_TasksStk[${CONFIG_DRV_USART_IDX3_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX4 == true && CONFIG_DRV_USART_RTOS_IDX4 == "Standalone">
OS_TASK  _DRV_USART_IDX4_Tasks_TCB;
uint32_t _DRV_USART_IDX4_TasksStk[${CONFIG_DRV_USART_IDX4_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_DRV_USART_INST_IDX5 == true && CONFIG_DRV_USART_RTOS_IDX5 == "Standalone">
OS_TASK  _DRV_USART_IDX5_Tasks_TCB;
uint32_t _DRV_USART_IDX5_TasksStk[${CONFIG_DRV_USART_IDX5_RTOS_TASK_SIZE}];
</#if>
</#if>

<#if CONFIG_USE_GFX_STACK && CONFIG_GFX_RTOS == "Standalone">
OS_TASK  _GFX_Tasks_TCB;
uint32_t _GFX_TasksStk[${CONFIG_GFX_RTOS_TASK_SIZE}];
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN && CONFIG_GFX_HGC_RTOS == "Standalone">
OS_TASK  _GFX_HGC_Tasks_TCB;
uint32_t _GFX_HGC_TasksStk[${CONFIG_GFX_HGC_RTOS_TASK_SIZE}];
</#if>
<#if  CONFIG_SYS_COMMAND_RTOS == "Standalone">
OS_TASK  _SYS_COMMAND_Tasks_TCB;
uint32_t _SYS_COMMAND_TasksStk[${CONFIG_SYS_COMMAND_RTOS_TASK_SIZE}];
</#if>
<#if  CONFIG_SYS_CONSOLE_RTOS_IDX0 == "Standalone">
OS_TASK  _SYS_CONSOLE_IDX0_Tasks_TCB;
uint32_t _SYS_CONSOLE_IDX0_TasksStk[${CONFIG_SYS_CONSOLE_IDX0_RTOS_TASK_SIZE}];
</#if>
<#if  CONFIG_SYS_CONSOLE_RTOS_IDX1 == "Standalone">
OS_TASK  _SYS_CONSOLE_IDX1_Tasks_TCB;
uint32_t _SYS_CONSOLE_IDX1_TasksStk[${CONFIG_SYS_CONSOLE_IDX1_RTOS_TASK_SIZE}];
</#if>
<#if (CONFIG_3RDPARTY_RTOS_USED == "embOS") && (CONFIG_SYS_RTCC_RTOS == "Standalone")>
OS_TASK  _SYS_RTCC_Tasks_TCB;
uint32_t _SYS_RTCC_TasksStk[${CONFIG_SYS_RTCC_RTOS_TASK_SIZE}];
</#if>
<#if (CONFIG_3RDPARTY_RTOS_USED == "embOS") && (CONFIG_SYS_DEVCON_RTOS == "Standalone")>
OS_TASK  _SYS_DEVCON_Tasks_TCB;
uint32_t _SYS_DEVCON_TasksStk[${CONFIG_SYS_DEVCON_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_USE_SYS_DMA == true && CONFIG_SYS_DMA_RTOS == "Standalone">
OS_TASK  _SYS_DMA_Tasks_TCB;
uint32_t _SYS_DMA_TasksStk[${CONFIG_SYS_DMA_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_USE_SYS_FS == true && CONFIG_SYS_FS_RTOS == "Standalone">
OS_TASK  _SYS_FS_Tasks_TCB;
uint32_t _SYS_FS_TasksStk[${CONFIG_SYS_FS_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_SYS_MSG_INST_IDX0 == true && CONFIG_SYS_MSG_RTOS_IDX0 == "Standalone">
OS_TASK  _SYS_MSG_IDX0_Tasks_TCB;
uint32_t _SYS_MSG_IDX0_TasksStk[${CONFIG_SYS_MSG_IDX0_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_SYS_MSG_INST_IDX1 == true && CONFIG_SYS_MSG_RTOS_IDX1 == "Standalone">
OS_TASK  _SYS_MSG_IDX1_Tasks_TCB;
uint32_t _SYS_MSG_IDX1_TasksStk[${CONFIG_SYS_MSG_IDX1_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_USE_SYS_TMR == true && CONFIG_SYS_TMR_RTOS == "Standalone">
OS_TASK  _SYS_TMR_Tasks_TCB;
uint32_t _SYS_TMR_TasksStk[${CONFIG_SYS_TMR_RTOS_TASK_SIZE}];
</#if>


<#if CONFIG_USE_SYS_TOUCH == true && CONFIG_SYS_TOUCH_RTOS == "Standalone">
OS_TASK  _SYS_Touch_Tasks_TCB;
uint32_t _SYS_Touch_TasksStk[${CONFIG_SYS_TOUCH_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_USE_TCPIP_STACK && CONFIG_TCPIP_RTOS == "Standalone">
OS_TASK  _TCPIP_Tasks_TCB;
uint32_t _TCPIP_TasksStk[${CONFIG_TCPIP_RTOS_TASK_SIZE}];
</#if>

<#if CONFIG_DRV_USB_DEVICE_SUPPORT == true || CONFIG_DRV_USB_HOST_SUPPORT == true>
<#if CONFIG_USE_USB_STACK && CONFIG_USB_RTOS == "Standalone">
OS_TASK  _USB_Tasks_TCB;
uint32_t _USB_TasksStk[${CONFIG_USB_RTOS_TASK_SIZE}];
</#if>
</#if>

<#if CONFIG_APP_IDX_0?has_content>
OS_TASK  _${CONFIG_APP_NAME_0?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_0?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX0}];
<#else>
OS_TASK  _APP_Tasks_TCB;
uint32_t _APP_TasksStk[${CONFIG_APP_TASK_SIZE_IDX0}];
</#if>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
OS_TASK  _${CONFIG_APP_NAME_1?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_1?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX1}];
</#if>
<#if CONFIG_APP_IDX_2 == true>
OS_TASK  _${CONFIG_APP_NAME_2?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_2?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX2}];
</#if>
<#if CONFIG_APP_IDX_3 == true>
OS_TASK  _${CONFIG_APP_NAME_3?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_3?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX3}];
</#if>
<#if CONFIG_APP_IDX_4 == true>
OS_TASK  _${CONFIG_APP_NAME_4?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_4?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX4}];
</#if>
<#if CONFIG_APP_IDX_5 == true>
OS_TASK  _${CONFIG_APP_NAME_5?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_5?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX5}];
</#if>
<#if CONFIG_APP_IDX_6 == true>
OS_TASK  _${CONFIG_APP_NAME_6?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_6?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX6}];
</#if>
<#if CONFIG_APP_IDX_7 == true>
OS_TASK  _${CONFIG_APP_NAME_7?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_7?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX7}];
</#if>
<#if CONFIG_APP_IDX_8 == true>
OS_TASK  _${CONFIG_APP_NAME_8?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_8?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX8}];
</#if>
<#if CONFIG_APP_IDX_9 == true>
OS_TASK  _${CONFIG_APP_NAME_9?upper_case}_Tasks_TCB;
uint32_t _${CONFIG_APP_NAME_9?upper_case}_TasksStk[${CONFIG_APP_TASK_SIZE_IDX9}];
</#if>
</#if>
</#if><#-- end of CONFIG_3RDPARTY_RTOS_USED == "embOS" -->
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _SYS_Tasks ( void *p_arg );
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">

static void _SYS_Tasks( ULONG thread_input );
<#else>
static void _SYS_Tasks ( void );
</#if>
</#if>
<#if CONFIG_USE_SYS_RTCC == true>
<#assign SYS_RTCC_TASKS = "PROTO">
<#include "/framework/system/rtcc/templates/sys_rtcc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DEVCON == true>
<#assign SYS_DEVCON_TASKS = "PROTO">
<#include "/framework/system/devcon/config/sys_devcon_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DMA == true>
<#assign SYS_DMA_TASKS = "PROTO">
<#include "/framework/system/dma/templates/sys_dma_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_FS == true>
<#assign SYS_FS_TASKS = "PROTO">
<#include "/framework/system/fs/templates/sys_fs_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_MSG == true>
<#assign SYS_MSG_TASKS = "PROTO">
<#include "/framework/system/msg/config/sys_msg_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_CONSOLE == true>
<#assign SYS_CONSOLE_TASKS = "PROTO">
<#include "/framework/system/console/templates/sys_console_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_COMMAND == true>
<#assign SYS_COMMAND_TASKS = "PROTO">
<#include "/framework/system/command/config/sys_command_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TMR == true>
<#assign SYS_TMR_TASKS = "PROTO">
<#include "/framework/system/tmr/config/sys_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TOUCH == true>
<#assign SYS_TOUCH_TASKS = "PROTO">
<#include "/framework/system/touch/config/sys_touch_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TMR == true>
<#assign DRV_TMR_TASKS = "PROTO">
<#include "/framework/driver/tmr/templates/drv_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_USART == true>
<#assign DRV_USART_TASKS = "PROTO">
<#include "/framework/driver/usart/templates/drv_usart_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25 == true>
<#assign DRV_SST25_TASKS = "PROTO">
<#include "/framework/driver/spi_flash/sst25/templates/drv_sst25_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF020B == true>
<#assign DRV_SST25VF020B_TASKS = "PROTO">
<#include "/framework/driver/spi_flash/sst25vf020b/templates/drv_sst25vf020b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF016B == true>
<#assign DRV_SST25VF016B_TASKS = "PROTO">
<#include "/framework/driver/spi_flash/sst25vf016b/templates/drv_sst25vf016b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_IPF == true>
<#assign DRV_IPF_TASKS = "PROTO">
<#include "/framework/driver/spi_flash/pic32wk_ipf/templates/drv_ipf_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF064C == true>
<#assign DRV_SST25VF064C_TASKS = "PROTO">
<#include "/framework/driver/spi_flash/sst25vf064c/templates/drv_sst25vf064c_tasks.c.ftl">
</#if>
<#if CONFIG_DRV_SPI_USE_DRIVER == true>
<#assign DRV_SPI_TASKS = "PROTO">
<#include "/framework/driver/spi/config/drv_spi_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST26 == true>
<#assign DRV_SST26_TASKS = "PROTO">
<#include "/framework/driver/sqi_flash/sst26/config/drv_sst26_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2S == true>
<#assign DRV_I2S_TASKS = "PROTO">
<#include "/framework/driver/i2s/templates/drv_i2s_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4953 == true>
<#assign DRV_CODEC_AK4953_TASKS = "PROTO">
<#include "/framework/driver/codec/ak4953/templates/drv_ak4953_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4384 == true>
<#assign DRV_CODEC_AK4384_TASKS = "PROTO">
<#include "/framework/driver/codec/ak4384/templates/drv_ak4384_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SDCARD == true>
<#assign DRV_SDCARD_TASKS = "PROTO">
<#include "/framework/driver/sdcard/config/drv_sdcard_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2C == true>
<#assign DRV_I2C_TASKS = "PROTO">
<#include "/framework/driver/i2c/templates/drv_i2c_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true>
<#assign DRV_TOUCH_MTCH6301_TASKS = "PROTO">
<#include "/framework/driver/touch/mtch6301/config/drv_mtch6301_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true>
<#assign DRV_TOUCH_ADC10BIT_TASKS = "PROTO">
<#include "/framework/driver/touch/adc10bit/config/drv_adc10bit_tasks.c.ftl">
</#if>
<#if CONFIG_USE_GFX_STACK == true>
<#assign GFX_TASKS = "PROTO">
<#include "/framework/gfx/templates/gfx_tasks.c.ftl">
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN == true>
<#assign GFX_HGC_TASKS = "PROTO">
<#include "/framework/gfx/templates/gfx_hgc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_USB_STACK == true>
<#assign USB_TASKS = "PROTO">
<#include "/framework/usb/templates/usb_tasks.c.ftl">
</#if>
<#if CONFIG_USE_TCPIP_STACK == true>
<#assign TCPIP_TASKS = "PROTO">
<#include "/framework/tcpip/config/tcpip_stack_tasks.c.ftl">
</#if>
<#include "/framework/net/templates/system_tasks_rtos.c.proto.ftl">
<#if CONFIG_USE_TEST_HARNESS == true>
<#include "/framework/test/templates/system_tasks.c.rtos_proto.ftl">
</#if>
<#if CONFIG_USE_SAMPLE_MODULE == true>
<#include "/framework/sample/templates/system_tasks.c.rtos_proto.ftl">
</#if>
<#if CONFIG_APP_IDX_0?has_content>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_0?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_0?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_0?upper_case}_Tasks(void);
</#if>
</#if>
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _APP_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _APP_Tasks(void *p_arg);
<#else>
static void _APP_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_1?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_1?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_1?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_2 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_2?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_2?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_2?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_3 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_3?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_3?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_3?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_4 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_4?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_4?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_4?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_5 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_5?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_5?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_5?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_6 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_6?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_6?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_6?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_7 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_7?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_7?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_7?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_8 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_8?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_8?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_8?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
<#if CONFIG_APP_IDX_9 == true>
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${CONFIG_APP_NAME_9?upper_case}_Tasks(ULONG thread_input);
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${CONFIG_APP_NAME_9?upper_case}_Tasks(void *p_arg);
<#else>
static void _${CONFIG_APP_NAME_9?upper_case}_Tasks(void);
</#if>
</#if>
</#if>
</#if>


// *****************************************************************************
// *****************************************************************************
// Section: System "Tasks" Routine
// *****************************************************************************
// *****************************************************************************

/*******************************************************************************
  Function:
    void SYS_Tasks ( void )

  Remarks:
    See prototype in system/common/sys_module.h.
*/
<#macro APP_TASK RTOS_NAME APP_NAME APP_USE_DELAY APP_DELAY>

/*******************************************************************************
  Function:
    void _${APP_NAME?upper_case}_Tasks ( <#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">ULONG thread_input<#else>void</#if> )

  Summary:
    Maintains state machine of ${APP_NAME?upper_case}.
*/

<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _${APP_NAME?upper_case}_Tasks(ULONG thread_input)
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _${APP_NAME?upper_case}_Tasks(void *p_arg)
<#else>
static void _${APP_NAME?upper_case}_Tasks(void)
</#if>
</#if>
{
<#if RTOS_NAME == "uC/OS-III">
    OS_ERR os_err;

</#if>
    while(1)
    {
        ${APP_NAME?upper_case}_Tasks();
<#if APP_USE_DELAY>
<#if (RTOS_NAME == "FreeRTOS") || (RTOS_NAME == "OpenRTOS_V8.x.x")>
<#if CONFIG_FREERTOS_ENABLE_BACKWARD_COMPATIBILITY == true>
        vTaskDelay(${APP_DELAY} / portTICK_RATE_MS);
<#else>
        vTaskDelay(${APP_DELAY} / portTICK_PERIOD_MS);
</#if>
</#if>
<#if RTOS_NAME == "uC/OS-III">
        OSTimeDly (${APP_DELAY}, OS_OPT_TIME_DLY, &os_err);
</#if>
<#if RTOS_NAME == "uC/OS-II">
        OSTimeDly (${APP_DELAY});
</#if>
<#if RTOS_NAME == "ThreadX">
        tx_thread_sleep(${APP_DELAY});
</#if>
<#if RTOS_NAME == "embOS">
        OS_Delay(${APP_DELAY});
</#if>
</#if>
    }
}

</#macro>
<#if CONFIG_USE_3RDPARTY_RTOS && CONFIG_3RDPARTY_RTOS_USED == "ThreadX">

#define SYS_BYTE_POOL_SIZE   ${THREADX_TOTAL_THREADSTK_SIZE?c}<#-- see freemarker manual, this formats the number according to 'C' lanuage rules. Without it, FreeMarker was inserting commas into number. -->

void tx_application_define(void* first_unused_memory)
{
    /* Create a byte memory pool from which to allocate the thread stacks.  */
    tx_byte_pool_create(&_sys_byte_pool_0, "sys byte pool 0", first_unused_memory,SYS_BYTE_POOL_SIZE);

<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_SYS_Tasks" TASK_NAME="Sys Tasks" TASK_PRI=CONFIG_FW_SYS_TASK_PRIORITY TASK_STK_SZ=CONFIG_FW_SYS_TASK_SIZE/>

<#if CONFIG_USE_SYS_RTCC == true>
<#assign SYS_RTCC_TASKS = "CREATE_TASK">
<#include "/framework/system/rtcc/templates/sys_rtcc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DEVCON == true>
<#assign SYS_DEVCON_TASKS = "CREATE_TASK">
<#include "/framework/system/devcon/config/sys_devcon_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DMA == true>
<#assign SYS_DMA_TASKS = "CREATE_TASK">
<#include "/framework/system/dma/templates/sys_dma_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_FS == true>
<#assign SYS_FS_TASKS = "CREATE_TASK">
<#include "/framework/system/fs/templates/sys_fs_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_MSG == true>
<#assign SYS_MSG_TASKS = "CREATE_TASK">
<#include "/framework/system/msg/config/sys_msg_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_CONSOLE == true>
<#assign SYS_CONSOLE_TASKS = "CREATE_TASK">
<#include "/framework/system/console/templates/sys_console_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_COMMAND == true>
<#assign SYS_COMMAND_TASKS = "CREATE_TASK">
<#include "/framework/system/command/config/sys_command_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TMR == true>
<#assign SYS_TMR_TASKS = "CREATE_TASK">
<#include "/framework/system/tmr/config/sys_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TOUCH == true>
<#assign SYS_TOUCH_TASKS = "CREATE_TASK">
<#include "/framework/system/touch/config/sys_touch_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TMR == true>
<#assign DRV_TMR_TASKS = "CREATE_TASK">
<#include "/framework/driver/tmr/templates/drv_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_USART == true>
<#assign DRV_USART_TASKS = "CREATE_TASK">
<#include "/framework/driver/usart/templates/drv_usart_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25 == true>
<#assign DRV_SST25_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/sst25/templates/drv_sst25_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF020B == true>
<#assign DRV_SST25VF020B_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/sst25vf020b/templates/drv_sst25vf020b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF016B == true>
<#assign DRV_SST25VF016B_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/sst25vf016b/templates/drv_sst25vf016b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_IPF == true>
<#assign DRV_IPF_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/pic32wk_ipf/templates/drv_ipf_tasks.c.ftl">
</#if>
<#if CONFIG_DRV_SPI_USE_DRIVER == true>
<#assign DRV_SPI_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi/config/drv_spi_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST26 == true>
<#assign DRV_SST26_TASKS = "CREATE_TASK">
<#include "/framework/driver/sqi_flash/sst26/config/drv_sst26_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2S == true>
<#assign DRV_I2S_TASKS = "CREATE_TASK">
<#include "/framework/driver/i2s/templates/drv_i2s_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4953 == true>
<#assign DRV_CODEC_AK4953_TASKS = "CREATE_TASK">
<#include "/framework/driver/codec/ak4953/templates/drv_ak4953_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4384 == true>
<#assign DRV_CODEC_AK4384_TASKS = "CREATE_TASK">
<#include "/framework/driver/codec/ak4384/templates/drv_ak4384_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SDCARD == true>
<#assign DRV_SDCARD_TASKS = "CREATE_TASK">
<#include "/framework/driver/sdcard/config/drv_sdcard_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2C == true>
<#assign DRV_I2C_TASKS = "CREATE_TASK">
<#include "/framework/driver/i2c/templates/drv_i2c_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true>
<#assign DRV_TOUCH_MTCH6301_TASKS = "CREATE_TASK">
<#include "/framework/driver/touch/mtch6301/config/drv_mtch6301_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true>
<#assign DRV_TOUCH_ADC10BIT_TASKS = "CREATE_TASK">
<#include "/framework/driver/touch/adc10bit/config/drv_adc10bit_tasks.c.ftl">
</#if>
<#if CONFIG_USE_GFX_STACK == true>
<#assign GFX_TASKS = "CREATE_TASK">
<#include "/framework/gfx/templates/gfx_tasks.c.ftl">
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN == true>
<#assign GFX_HGC_TASKS = "CREATE_TASK">
<#include "/framework/gfx/templates/gfx_hgc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_USB_STACK == true>
<#assign USB_TASKS = "CREATE_TASK">
<#include "/framework/usb/templates/usb_tasks.c.ftl">
</#if>
<#if CONFIG_USE_TCPIP_STACK == true>
<#assign TCPIP_TASKS = "CREATE_TASK">
<#include "/framework/tcpip/config/tcpip_stack_tasks.c.ftl">
</#if>

    /* Maintain the application's state machine. */
<#if CONFIG_APP_IDX_0?has_content>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_0?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_0?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX0 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX0/>
<#else>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_APP_Tasks" TASK_NAME="App Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX0 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX0/>
</#if>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_1?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_1?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX1 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX1/>
</#if>
<#if CONFIG_APP_IDX_2 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_2?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_2?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX2 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX2/>
</#if>
<#if CONFIG_APP_IDX_3 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_3?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_3?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX3 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX3/>
</#if>
<#if CONFIG_APP_IDX_4 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_4?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_4?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX4 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX4/>
</#if>
<#if CONFIG_APP_IDX_5 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_5?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_5?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX5 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX5/>
</#if>
<#if CONFIG_APP_IDX_6 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_6?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_6?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX6 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX6/>
</#if>
<#if CONFIG_APP_IDX_7 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_7?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_7?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX7 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX7/>
</#if>
<#if CONFIG_APP_IDX_8 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_8?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_8?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX8 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX8/>
</#if>
<#if CONFIG_APP_IDX_9 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_9?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_9?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX9 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX9/>
</#if>
</#if>
}
// *****************************************************************************
// *****************************************************************************
// Section: System "Tasks" Routine
// *****************************************************************************
// *****************************************************************************

/*******************************************************************************
  Function:
    void SYS_Tasks ( void )

  Remarks:
    See prototype in system/common/sys_module.h.
*/
void SYS_Tasks ( void )
{
    /*Enter the ThreadX kernel.*/
    tx_kernel_enter();
}
<#else>

void SYS_Tasks ( void )
{
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-III">
    OS_ERR os_err;
    
</#if>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_SYS_Tasks" TASK_NAME="Sys Tasks" TASK_PRI=CONFIG_FW_SYS_TASK_PRIORITY TASK_STK_SZ=CONFIG_FW_SYS_TASK_SIZE/>
<#if CONFIG_USE_SYS_RTCC == true>
<#assign SYS_RTCC_TASKS = "CREATE_TASK">
<#include "/framework/system/rtcc/templates/sys_rtcc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DEVCON == true>
<#assign SYS_DEVCON_TASKS = "CREATE_TASK">
<#include "/framework/system/devcon/config/sys_devcon_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DMA == true>
<#assign SYS_DMA_TASKS = "CREATE_TASK">
<#include "/framework/system/dma/templates/sys_dma_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_FS == true>
<#assign SYS_FS_TASKS = "CREATE_TASK">
<#include "/framework/system/fs/templates/sys_fs_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_MSG == true>
<#assign SYS_MSG_TASKS = "CREATE_TASK">
<#include "/framework/system/msg/config/sys_msg_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_CONSOLE == true>
<#assign SYS_CONSOLE_TASKS = "CREATE_TASK">
<#include "/framework/system/console/templates/sys_console_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_COMMAND == true>
<#assign SYS_COMMAND_TASKS = "CREATE_TASK">
<#include "/framework/system/command/config/sys_command_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TMR == true>
<#assign SYS_TMR_TASKS = "CREATE_TASK">
<#include "/framework/system/tmr/config/sys_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TOUCH == true>
<#assign SYS_TOUCH_TASKS = "CREATE_TASK">
<#include "/framework/system/touch/config/sys_touch_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TMR == true>
<#assign DRV_TMR_TASKS = "CREATE_TASK">
<#include "/framework/driver/tmr/templates/drv_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_USART == true>
<#assign DRV_USART_TASKS = "CREATE_TASK">
<#include "/framework/driver/usart/templates/drv_usart_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25 == true>
<#assign DRV_SST25_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/sst25/templates/drv_sst25_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF020B == true>
<#assign DRV_SST25VF020B_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/sst25vf020b/templates/drv_sst25vf020b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF016B == true>
<#assign DRV_SST25VF016B_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/sst25vf016b/templates/drv_sst25vf016b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_IPF == true>
<#assign DRV_IPF_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/pic32wk_ipf/templates/drv_ipf_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF064C == true>
<#assign DRV_SST25VF064C_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi_flash/sst25vf064c/templates/drv_sst25vf064c_tasks.c.ftl">
</#if>
<#if CONFIG_DRV_SPI_USE_DRIVER == true>
<#assign DRV_SPI_TASKS = "CREATE_TASK">
<#include "/framework/driver/spi/config/drv_spi_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST26 == true>
<#assign DRV_SST26_TASKS = "CREATE_TASK">
<#include "/framework/driver/sqi_flash/sst26/config/drv_sst26_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2S == true>
<#assign DRV_I2S_TASKS = "CREATE_TASK">
<#include "/framework/driver/i2s/templates/drv_i2s_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4953 == true>
<#assign DRV_CODEC_AK4953_TASKS = "CREATE_TASK">
<#include "/framework/driver/codec/ak4953/templates/drv_ak4953_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4384 == true>
<#assign DRV_CODEC_AK4384_TASKS = "CREATE_TASK">
<#include "/framework/driver/codec/ak4384/templates/drv_ak4384_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SDCARD == true>
<#assign DRV_SDCARD_TASKS = "CREATE_TASK">
<#include "/framework/driver/sdcard/config/drv_sdcard_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2C == true>
<#assign DRV_I2C_TASKS = "CREATE_TASK">
<#include "/framework/driver/i2c/templates/drv_i2c_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true>
<#assign DRV_TOUCH_MTCH6301_TASKS = "CREATE_TASK">
<#include "/framework/driver/touch/mtch6301/config/drv_mtch6301_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true>
<#assign DRV_TOUCH_ADC10BIT_TASKS = "CREATE_TASK">
<#include "/framework/driver/touch/adc10bit/config/drv_adc10bit_tasks.c.ftl">
</#if>
<#if CONFIG_USE_GFX_STACK == true>
<#assign GFX_TASKS = "CREATE_TASK">
<#include "/framework/gfx/templates/gfx_tasks.c.ftl">
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN == true>
<#assign GFX_HGC_TASKS = "CREATE_TASK">
<#include "/framework/gfx/templates/gfx_hgc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_USB_STACK == true>
<#assign USB_TASKS = "CREATE_TASK">
<#include "/framework/usb/templates/usb_tasks.c.ftl">
</#if>
<#if CONFIG_USE_TCPIP_STACK == true>
<#assign TCPIP_TASKS = "CREATE_TASK">
<#include "/framework/tcpip/config/tcpip_stack_tasks.c.ftl">
</#if>
<#include "/framework/net/templates/system_tasks_rtos.c.create_task.ftl">
<#if CONFIG_USE_TEST_HARNESS == true>
<#include "/framework/test/templates/system_tasks.c.rtos_create_tasks.ftl">
</#if>
<#if CONFIG_USE_SAMPLE_MODULE == true>
<#include "/framework/sample/templates/system_tasks.c.rtos_create_tasks.ftl">
</#if>
<#if CONFIG_APP_IDX_0?has_content>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_0?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_0?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX0 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX0/>
<#else>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_APP_Tasks" TASK_NAME="App Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX0 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX0/>
</#if>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_1?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_1?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX1 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX1/>
</#if>
<#if CONFIG_APP_IDX_2 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_2?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_2?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX2 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX2/>
</#if>
<#if CONFIG_APP_IDX_3 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_3?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_3?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX3 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX3/>
</#if>
<#if CONFIG_APP_IDX_4 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_4?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_4?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX4 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX4/>
</#if>
<#if CONFIG_APP_IDX_5 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_5?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_5?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX5 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX5/>
</#if>
<#if CONFIG_APP_IDX_6 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_6?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_6?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX6 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX6/>
</#if>
<#if CONFIG_APP_IDX_7 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_7?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_7?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX7 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX7/>
</#if>
<#if CONFIG_APP_IDX_8 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_8?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_8?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX8 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX8/>
</#if>
<#if CONFIG_APP_IDX_9 == true>
<@RTOS_TASK_CREATE RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_FUNC_NAME="_"+CONFIG_APP_NAME_9?upper_case+"_Tasks" TASK_NAME=CONFIG_APP_NAME_9?upper_case+" Tasks" TASK_PRI=CONFIG_APP_TASK_PRIORITY_IDX9 TASK_STK_SZ=CONFIG_APP_TASK_SIZE_IDX9/>
</#if>
</#if>
    /**************
     * Start RTOS * 
     **************/
<#if (CONFIG_3RDPARTY_RTOS_USED == "FreeRTOS") || (CONFIG_3RDPARTY_RTOS_USED == "OpenRTOS_V8.x.x")>
    vTaskStartScheduler(); /* This function never returns. */
</#if>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-III">
    OSStart(&os_err); /* This function never returns. */
</#if>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
    OSStart(); /* This function never returns. */
</#if>
<#if CONFIG_3RDPARTY_RTOS_USED == "embOS">
    OS_Start();
</#if>
}
</#if><#--end of if threadx else 'other rtos' control block -->


/*******************************************************************************
  Function:
    void _SYS_Tasks ( <#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">ULONG thread_input<#else>void</#if> )

  Summary:
    Maintains state machines of system modules.
*/
<#if CONFIG_3RDPARTY_RTOS_USED == "ThreadX">
static void _SYS_Tasks ( ULONG thread_input)
<#else>
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-II">
static void _SYS_Tasks ( void *p_arg )
<#else>
static void _SYS_Tasks ( void)
</#if>
</#if>
{
<#if CONFIG_3RDPARTY_RTOS_USED == "uC/OS-III">
    OS_ERR os_err;

</#if>
    while(1)
    {
        /* Maintain system services */
<#if CONFIG_USE_SYS_RTCC == true>
<#assign SYS_RTCC_TASKS = "TASK_CALL">
<#include "/framework/system/rtcc/templates/sys_rtcc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DEVCON == true>
<#assign SYS_DEVCON_TASKS = "TASK_CALL">
<#include "/framework/system/devcon/config/sys_devcon_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DMA == true>
<#assign SYS_DMA_TASKS = "TASK_CALL">
<#include "/framework/system/dma/templates/sys_dma_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_FS == true>
<#assign SYS_FS_TASKS = "TASK_CALL">
<#include "/framework/system/fs/templates/sys_fs_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_MSG == true>
<#assign SYS_MSG_TASKS = "TASK_CALL">
<#include "/framework/system/msg/config/sys_msg_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_CONSOLE == true>
<#assign SYS_CONSOLE_TASKS = "TASK_CALL">
<#include "/framework/system/console/templates/sys_console_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_COMMAND == true>
<#assign SYS_COMMAND_TASKS = "TASK_CALL">
<#include "/framework/system/command/config/sys_command_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TMR == true>
<#assign SYS_TMR_TASKS = "TASK_CALL">
<#include "/framework/system/tmr/config/sys_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TOUCH == true>
<#assign SYS_TOUCH_TASKS = "TASK_CALL">
<#include "/framework/system/touch/config/sys_touch_tasks.c.ftl">
</#if>

        /* Maintain Device Drivers */
<#if CONFIG_USE_DRV_TMR == true>
<#assign DRV_TMR_TASKS = "TASK_CALL">
<#include "/framework/driver/tmr/templates/drv_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_USART == true>
<#assign DRV_USART_TASKS = "TASK_CALL">
<#include "/framework/driver/usart/templates/drv_usart_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25 == true>
<#assign DRV_SST25_TASKS = "TASK_CALL">
<#include "/framework/driver/spi_flash/sst25/templates/drv_sst25_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF020B == true>
<#assign DRV_SST25VF020B_TASKS = "TASK_CALL">
<#include "/framework/driver/spi_flash/sst25vf020b/templates/drv_sst25vf020b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF016B == true>
<#assign DRV_SST25VF016B_TASKS = "TASK_CALL">
<#include "/framework/driver/spi_flash/sst25vf016b/templates/drv_sst25vf016b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_IPF == true>
<#assign DRV_IPF_TASKS = "TASK_CALL">
<#include "/framework/driver/spi_flash/pic32wk_ipf/templates/drv_ipf_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF064C == true>
<#assign DRV_SST25VF064C_TASKS = "TASK_CALL">
<#include "/framework/driver/spi_flash/sst25vf064c/templates/drv_sst25vf064c_tasks.c.ftl">
</#if>
<#if CONFIG_DRV_SPI_USE_DRIVER == true>
<#assign DRV_SPI_TASKS = "TASK_CALL">
<#include "/framework/driver/spi/config/drv_spi_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST26 == true>
<#assign DRV_SST26_TASKS = "TASK_CALL">
<#include "/framework/driver/sqi_flash/sst26/config/drv_sst26_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2S == true>
<#assign DRV_I2S_TASKS = "TASK_CALL">
<#include "/framework/driver/i2s/templates/drv_i2s_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4953 == true>
<#assign DRV_CODEC_AK4953_TASKS = "TASK_CALL">
<#include "/framework/driver/codec/ak4953/templates/drv_ak4953_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4384 == true>
<#assign DRV_CODEC_AK4384_TASKS = "TASK_CALL">
<#include "/framework/driver/codec/ak4384/templates/drv_ak4384_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SDCARD == true>
<#assign DRV_SDCARD_TASKS = "TASK_CALL">
<#include "/framework/driver/sdcard/config/drv_sdcard_tasks.c.ftl">    
</#if>
<#if CONFIG_USE_DRV_I2C == true>
<#assign DRV_I2C_TASKS = "TASK_CALL">
<#include "/framework/driver/i2c/templates/drv_i2c_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true>
<#assign DRV_TOUCH_MTCH6301_TASKS = "TASK_CALL">
<#include "/framework/driver/touch/mtch6301/config/drv_mtch6301_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true>
<#assign DRV_TOUCH_ADC10BIT_TASKS = "TASK_CALL">
<#include "/framework/driver/touch/adc10bit/config/drv_adc10bit_tasks.c.ftl">
</#if>

        /* Maintain Middleware */
<#if CONFIG_USE_GFX_STACK == true>
<#assign GFX_TASKS = "TASK_CALL">
<#include "/framework/gfx/templates/gfx_tasks.c.ftl">
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN == true>
<#assign GFX_HGC_TASKS = "TASK_CALL">
<#include "/framework/gfx/templates/gfx_hgc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_USB_STACK == true>
<#assign USB_TASKS = "TASK_CALL">
<#include "/framework/usb/templates/usb_tasks.c.ftl">
</#if>
<#if CONFIG_USE_TCPIP_STACK == true>
<#assign TCPIP_TASKS = "TASK_CALL">
<#include "/framework/tcpip/config/tcpip_stack_tasks.c.ftl">
</#if>
<#include "/framework/net/templates/system_tasks_rtos.c.task_call.ftl">
<#if CONFIG_USE_SAMPLE_MODULE == true>
<#include "/framework/sample/templates/system_tasks.c.rtos_task_call.ftl">
</#if>

        /* Task Delay */
<@RTOS_TASK_DELAY RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED TASK_DELAY=CONFIG_FW_SYS_TASK_DELAY/>
    }
}

<#if CONFIG_USE_SYS_RTCC == true>
<#assign SYS_RTCC_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/rtcc/templates/sys_rtcc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DEVCON == true>
<#assign SYS_DEVCON_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/devcon/config/sys_devcon_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_DMA == true>
<#assign SYS_DMA_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/dma/templates/sys_dma_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_FS == true>
<#assign SYS_FS_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/fs/templates/sys_fs_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_MSG == true>
<#assign SYS_MSG_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/msg/config/sys_msg_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_CONSOLE == true>
<#assign SYS_CONSOLE_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/console/templates/sys_console_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_COMMAND == true>
<#assign SYS_COMMAND_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/command/config/sys_command_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TMR == true>
<#assign SYS_TMR_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/tmr/config/sys_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_SYS_TOUCH == true>
<#assign SYS_TOUCH_TASKS = "LOCAL_FUNCTION">
<#include "/framework/system/touch/config/sys_touch_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TMR == true>
<#assign DRV_TMR_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/tmr/templates/drv_tmr_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_USART == true>
<#assign DRV_USART_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/usart/templates/drv_usart_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25 == true>
<#assign DRV_SST25_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/spi_flash/sst25/templates/drv_sst25_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF020B == true>
<#assign DRV_SST25VF020B_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/spi_flash/sst25vf020b/templates/drv_sst25vf020b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF016B == true>
<#assign DRV_SST25VF016B_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/spi_flash/sst25vf016b/templates/drv_sst25vf016b_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_IPF == true>
<#assign DRV_IPF_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/spi_flash/pic32wk_ipf/templates/drv_ipf_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST25VF064C == true>
<#assign DRV_SST25VF064C_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/spi_flash/sst25vf064c/templates/drv_sst25vf064c_tasks.c.ftl">
</#if>
<#if CONFIG_DRV_SPI_USE_DRIVER == true>
<#assign DRV_SPI_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/spi/config/drv_spi_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SST26 == true>
<#assign DRV_SST26_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/sqi_flash/sst26/config/drv_sst26_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2S == true>
<#assign DRV_I2S_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/i2s/templates/drv_i2s_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4953 == true>
<#assign DRV_CODEC_AK4953_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/codec/ak4953/templates/drv_ak4953_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_CODEC_AK4384 == true>
<#assign DRV_CODEC_AK4384_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/codec/ak4384/templates/drv_ak4384_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_SDCARD == true>
<#assign DRV_SDCARD_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/sdcard/config/drv_sdcard_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_I2C == true>
<#assign DRV_I2C_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/i2c/templates/drv_i2c_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_MTCH6301 == true>
<#assign DRV_TOUCH_MTCH6301_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/touch/mtch6301/config/drv_mtch6301_tasks.c.ftl">
</#if>
<#if CONFIG_USE_DRV_TOUCH_ADC10BIT == true>
<#assign DRV_TOUCH_ADC10BIT_TASKS = "LOCAL_FUNCTION">
<#include "/framework/driver/touch/adc10bit/config/drv_adc10bit_tasks.c.ftl">
</#if>
<#if CONFIG_USE_GFX_STACK == true>
<#assign GFX_TASKS = "LOCAL_FUNCTION">
<#include "/framework/gfx/templates/gfx_tasks.c.ftl">
</#if>
<#if CONFIG_GFX_HGC_HAS_GEN?has_content && CONFIG_GFX_HGC_HAS_GEN == true>
<#assign GFX_HGC_TASKS = "LOCAL_FUNCTION">
<#include "/framework/gfx/templates/gfx_hgc_tasks.c.ftl">
</#if>
<#if CONFIG_USE_USB_STACK == true>
<#assign USB_TASKS = "LOCAL_FUNCTION">
<#include "/framework/usb/templates/usb_tasks.c.ftl">
</#if>
<#if CONFIG_USE_TCPIP_STACK == true>
<#assign TCPIP_TASKS = "LOCAL_FUNCTION">
<#include "/framework/tcpip/config/tcpip_stack_tasks.c.ftl">
</#if>
<#include "/framework/net/templates/system_tasks_rtos.c.local_functions.ftl">
<#if CONFIG_USE_TEST_HARNESS == true>
<#include "/framework/test/templates/system_tasks.c.rtos_local_function.ftl">
</#if>
<#if CONFIG_USE_SAMPLE_MODULE == true>
<#include "/framework/sample/templates/system_tasks.c.rtos_local_function.ftl">
</#if>
<#if CONFIG_APP_IDX_0?has_content>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_0 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX0 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX0/>
<#else>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME="APP" APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX0 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX0/>
</#if>
<#if CONFIG_APP_IDX_1?has_content>
<#if CONFIG_APP_IDX_1 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_1 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX1 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX1/>
</#if>
<#if CONFIG_APP_IDX_2 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_2 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX2 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX2/>
</#if>
<#if CONFIG_APP_IDX_3 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_3 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX3 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX3/>
</#if>
<#if CONFIG_APP_IDX_4 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_4 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX4 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX4/>
</#if>
<#if CONFIG_APP_IDX_5 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_5 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX5 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX5/>
</#if>
<#if CONFIG_APP_IDX_6 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_6 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX6 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX6/>
</#if>
<#if CONFIG_APP_IDX_7 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_7 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX7 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX7/>
</#if>
<#if CONFIG_APP_IDX_8 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_8 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX8 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX8/>
</#if>
<#if CONFIG_APP_IDX_9 == true>
<@APP_TASK RTOS_NAME=CONFIG_3RDPARTY_RTOS_USED APP_NAME=CONFIG_APP_NAME_9 APP_USE_DELAY=CONFIG_APP_TASK_USE_DELAY_IDX9 APP_DELAY=CONFIG_APP_TASK_DELAY_IDX9/>
</#if>
</#if>

/*******************************************************************************
 End of File
 */

